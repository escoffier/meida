// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Operation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Operation_h__
#define __Operation_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Datang
{

class Operation;
class OperationPrx;

}

namespace Datang
{

class RequestCanceledException : public ::Ice::UserExceptionHelper<RequestCanceledException, ::Ice::UserException>
{
public:

    virtual ~RequestCanceledException();

    RequestCanceledException(const RequestCanceledException&) = default;

    RequestCanceledException() = default;

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    static const ::std::string& ice_staticId();
};

static RequestCanceledException _iceS_RequestCanceledException_init;

enum class DEVICETYPE : unsigned char
{
    HAIKANG,
    DAHUA,
    YUSHI
};

struct DeviceInfo
{
    ::std::string id;
    ::std::string name;
    ::std::string sdk;
    ::Datang::DEVICETYPE type = ::Datang::DEVICETYPE::HAIKANG;

    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&, const ::Datang::DEVICETYPE&> ice_tuple() const
    {
        return std::tie(id, name, sdk, type);
    }
};

struct Catalog
{
    ::std::string id;
    ::std::string name;
    ::std::string sdk;
    ::Datang::DEVICETYPE type = ::Datang::DEVICETYPE::HAIKANG;

    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&, const ::Datang::DEVICETYPE&> ice_tuple() const
    {
        return std::tie(id, name, sdk, type);
    }
};

struct RealStreamReqParam
{
    ::std::string id;
    ::std::string destip;
    int destport;
    int pt;
    int ssrc;

    std::tuple<const ::std::string&, const ::std::string&, const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(id, destip, destport, pt, ssrc);
    }
};

struct RealStreamRespParam
{
    ::std::string id;
    ::std::string sourceip;
    ::std::string sourceport;

    std::tuple<const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(id, sourceip, sourceport);
    }
};

using CatalogList = ::std::vector<::Datang::Catalog>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace Datang
{

class Operation : public virtual ::Ice::Object
{
public:

    using ProxyType = OperationPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void requsetCatalogAsync(::std::string, ::std::function<void(const ::Datang::CatalogList&)>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_requsetCatalog(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void openRealStreamAsync(::Datang::RealStreamReqParam, ::std::function<void(const ::Datang::RealStreamRespParam&)>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_openRealStream(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ptzControlAsync(::std::string, ::std::string, ::std::function<void()>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_ptzControl(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getDeviceInfoAsync(int, ::std::function<void(const ::Datang::DeviceInfo&)>, ::std::function<void(::std::exception_ptr)>, const ::Ice::Current&) = 0;
    bool _iceD_getDeviceInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool login(::std::string, ::std::string, const ::Ice::Current&) = 0;
    bool _iceD_login(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current&) = 0;
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace Datang
{

class OperationPrx : public virtual ::Ice::Proxy<OperationPrx, ::Ice::ObjectPrx>
{
public:

    void requsetCatalog(const ::std::string& iceP_id, ::Datang::CatalogList& iceP_catalogs, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_catalogs = _makePromiseOutgoing<::Datang::CatalogList>(true, this, &Datang::OperationPrx::_iceI_requsetCatalog, iceP_id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto requsetCatalogAsync(const ::std::string& iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Datang::CatalogList>>().get_future())
    {
        return _makePromiseOutgoing<::Datang::CatalogList, P>(false, this, &Datang::OperationPrx::_iceI_requsetCatalog, iceP_id, context);
    }

    ::std::function<void()>
    requsetCatalogAsync(const ::std::string& iceP_id,
                        ::std::function<void(::Datang::CatalogList)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Datang::CatalogList>(response, ex, sent, this, &Datang::OperationPrx::_iceI_requsetCatalog, iceP_id, context);
    }

    void _iceI_requsetCatalog(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Datang::CatalogList>>&, const ::std::string&, const ::Ice::Context&);

    void openRealStream(const ::Datang::RealStreamReqParam& iceP_req, ::Datang::RealStreamRespParam& iceP_resp, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_resp = _makePromiseOutgoing<::Datang::RealStreamRespParam>(true, this, &Datang::OperationPrx::_iceI_openRealStream, iceP_req, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto openRealStreamAsync(const ::Datang::RealStreamReqParam& iceP_req, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Datang::RealStreamRespParam>>().get_future())
    {
        return _makePromiseOutgoing<::Datang::RealStreamRespParam, P>(false, this, &Datang::OperationPrx::_iceI_openRealStream, iceP_req, context);
    }

    ::std::function<void()>
    openRealStreamAsync(const ::Datang::RealStreamReqParam& iceP_req,
                        ::std::function<void(::Datang::RealStreamRespParam)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Datang::RealStreamRespParam>(response, ex, sent, this, &Datang::OperationPrx::_iceI_openRealStream, iceP_req, context);
    }

    void _iceI_openRealStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Datang::RealStreamRespParam>>&, const ::Datang::RealStreamReqParam&, const ::Ice::Context&);

    void ptzControl(const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &Datang::OperationPrx::_iceI_ptzControl, iceP_id, iceP_cmd, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto ptzControlAsync(const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &Datang::OperationPrx::_iceI_ptzControl, iceP_id, iceP_cmd, context);
    }

    ::std::function<void()>
    ptzControlAsync(const ::std::string& iceP_id, const ::std::string& iceP_cmd,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Datang::OperationPrx::_iceI_ptzControl, iceP_id, iceP_cmd, context);
    }

    void _iceI_ptzControl(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    void getDeviceInfo(int iceP_id, ::Datang::DeviceInfo& iceP_info, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_info = _makePromiseOutgoing<::Datang::DeviceInfo>(true, this, &Datang::OperationPrx::_iceI_getDeviceInfo, iceP_id, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getDeviceInfoAsync(int iceP_id, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::Datang::DeviceInfo>>().get_future())
    {
        return _makePromiseOutgoing<::Datang::DeviceInfo, P>(false, this, &Datang::OperationPrx::_iceI_getDeviceInfo, iceP_id, context);
    }

    ::std::function<void()>
    getDeviceInfoAsync(int iceP_id,
                       ::std::function<void(::Datang::DeviceInfo)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::Datang::DeviceInfo>(response, ex, sent, this, &Datang::OperationPrx::_iceI_getDeviceInfo, iceP_id, context);
    }

    void _iceI_getDeviceInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Datang::DeviceInfo>>&, int, const ::Ice::Context&);

    bool login(const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &Datang::OperationPrx::_iceI_login, iceP_user, iceP_password, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto loginAsync(const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &Datang::OperationPrx::_iceI_login, iceP_user, iceP_password, context);
    }

    ::std::function<void()>
    loginAsync(const ::std::string& iceP_user, const ::std::string& iceP_password,
               ::std::function<void(bool)> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &Datang::OperationPrx::_iceI_login, iceP_user, iceP_password, context);
    }

    void _iceI_login(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    void shutdown(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &Datang::OperationPrx::_iceI_shutdown, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto shutdownAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &Datang::OperationPrx::_iceI_shutdown, context);
    }

    ::std::function<void()>
    shutdownAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Datang::OperationPrx::_iceI_shutdown, context);
    }

    void _iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    OperationPrx() = default;
    friend ::std::shared_ptr<OperationPrx> IceInternal::createProxy<OperationPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<>
struct StreamableTraits< ::Datang::DEVICETYPE>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::Datang::DeviceInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Datang::DeviceInfo, S>
{
    static void read(S* istr, ::Datang::DeviceInfo& v)
    {
        istr->readAll(v.id, v.name, v.sdk, v.type);
    }
};

template<>
struct StreamableTraits<::Datang::Catalog>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Datang::Catalog, S>
{
    static void read(S* istr, ::Datang::Catalog& v)
    {
        istr->readAll(v.id, v.name, v.sdk, v.type);
    }
};

template<>
struct StreamableTraits<::Datang::RealStreamReqParam>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Datang::RealStreamReqParam, S>
{
    static void read(S* istr, ::Datang::RealStreamReqParam& v)
    {
        istr->readAll(v.id, v.destip, v.destport, v.pt, v.ssrc);
    }
};

template<>
struct StreamableTraits<::Datang::RealStreamRespParam>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::Datang::RealStreamRespParam, S>
{
    static void read(S* istr, ::Datang::RealStreamRespParam& v)
    {
        istr->readAll(v.id, v.sourceip, v.sourceport);
    }
};

}

namespace Datang
{

using OperationPtr = ::std::shared_ptr<Operation>;
using OperationPrxPtr = ::std::shared_ptr<OperationPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace Datang
{

class Operation;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::Datang::Operation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Datang::Operation*);

}

}

namespace Datang
{

class Operation;
::Ice::Object* upCast(::Datang::Operation*);
typedef ::IceInternal::Handle< ::Datang::Operation> OperationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Datang::Operation> OperationPrx;
typedef OperationPrx OperationPrxPtr;
void _icePatchObjectPtr(OperationPtr&, const ::Ice::ObjectPtr&);

}

namespace Datang
{

class RequestCanceledException : public ::Ice::UserException
{
public:

    RequestCanceledException() {}
    virtual ~RequestCanceledException() throw();

    virtual ::std::string ice_id() const;
    virtual RequestCanceledException* ice_clone() const;
    virtual void ice_throw() const;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

static RequestCanceledException _iceS_RequestCanceledException_init;

enum DEVICETYPE
{
    HAIKANG,
    DAHUA,
    YUSHI
};

struct DeviceInfo
{
    DeviceInfo() :
        type(::Datang::HAIKANG)
    {
    }
    
    DeviceInfo(const ::std::string& iceP_id, const ::std::string& iceP_name, const ::std::string& iceP_sdk, ::Datang::DEVICETYPE iceP_type) :
        id(iceP_id),
        name(iceP_name),
        sdk(iceP_sdk),
        type(iceP_type)
    {
    }
    

    ::std::string id;
    ::std::string name;
    ::std::string sdk;
    ::Datang::DEVICETYPE type;

    bool operator==(const DeviceInfo& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(name != rhs_.name)
        {
            return false;
        }
        if(sdk != rhs_.sdk)
        {
            return false;
        }
        if(type != rhs_.type)
        {
            return false;
        }
        return true;
    }

    bool operator<(const DeviceInfo& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(name < rhs_.name)
        {
            return true;
        }
        else if(rhs_.name < name)
        {
            return false;
        }
        if(sdk < rhs_.sdk)
        {
            return true;
        }
        else if(rhs_.sdk < sdk)
        {
            return false;
        }
        if(type < rhs_.type)
        {
            return true;
        }
        else if(rhs_.type < type)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const DeviceInfo& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const DeviceInfo& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const DeviceInfo& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const DeviceInfo& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct Catalog
{
    Catalog() :
        type(::Datang::HAIKANG)
    {
    }
    
    Catalog(const ::std::string& iceP_id, const ::std::string& iceP_name, const ::std::string& iceP_sdk, ::Datang::DEVICETYPE iceP_type) :
        id(iceP_id),
        name(iceP_name),
        sdk(iceP_sdk),
        type(iceP_type)
    {
    }
    

    ::std::string id;
    ::std::string name;
    ::std::string sdk;
    ::Datang::DEVICETYPE type;

    bool operator==(const Catalog& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(name != rhs_.name)
        {
            return false;
        }
        if(sdk != rhs_.sdk)
        {
            return false;
        }
        if(type != rhs_.type)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Catalog& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(name < rhs_.name)
        {
            return true;
        }
        else if(rhs_.name < name)
        {
            return false;
        }
        if(sdk < rhs_.sdk)
        {
            return true;
        }
        else if(rhs_.sdk < sdk)
        {
            return false;
        }
        if(type < rhs_.type)
        {
            return true;
        }
        else if(rhs_.type < type)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Catalog& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Catalog& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Catalog& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Catalog& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct RealStreamReqParam
{
    ::std::string id;
    ::std::string destip;
    ::Ice::Int destport;
    ::Ice::Int pt;
    ::Ice::Int ssrc;

    bool operator==(const RealStreamReqParam& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(destip != rhs_.destip)
        {
            return false;
        }
        if(destport != rhs_.destport)
        {
            return false;
        }
        if(pt != rhs_.pt)
        {
            return false;
        }
        if(ssrc != rhs_.ssrc)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RealStreamReqParam& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(destip < rhs_.destip)
        {
            return true;
        }
        else if(rhs_.destip < destip)
        {
            return false;
        }
        if(destport < rhs_.destport)
        {
            return true;
        }
        else if(rhs_.destport < destport)
        {
            return false;
        }
        if(pt < rhs_.pt)
        {
            return true;
        }
        else if(rhs_.pt < pt)
        {
            return false;
        }
        if(ssrc < rhs_.ssrc)
        {
            return true;
        }
        else if(rhs_.ssrc < ssrc)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RealStreamReqParam& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const RealStreamReqParam& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const RealStreamReqParam& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const RealStreamReqParam& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct RealStreamRespParam
{
    ::std::string id;
    ::std::string sourceip;
    ::std::string sourceport;

    bool operator==(const RealStreamRespParam& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(id != rhs_.id)
        {
            return false;
        }
        if(sourceip != rhs_.sourceip)
        {
            return false;
        }
        if(sourceport != rhs_.sourceport)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RealStreamRespParam& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(id < rhs_.id)
        {
            return true;
        }
        else if(rhs_.id < id)
        {
            return false;
        }
        if(sourceip < rhs_.sourceip)
        {
            return true;
        }
        else if(rhs_.sourceip < sourceip)
        {
            return false;
        }
        if(sourceport < rhs_.sourceport)
        {
            return true;
        }
        else if(rhs_.sourceport < sourceport)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RealStreamRespParam& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const RealStreamRespParam& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const RealStreamRespParam& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const RealStreamRespParam& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::Datang::Catalog> CatalogList;

}

namespace Datang
{

class AMD_Operation_requsetCatalog : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Operation_requsetCatalog();

    virtual void ice_response(const ::Datang::CatalogList&) = 0;
};

typedef ::IceUtil::Handle< ::Datang::AMD_Operation_requsetCatalog> AMD_Operation_requsetCatalogPtr;

class AMD_Operation_openRealStream : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Operation_openRealStream();

    virtual void ice_response(const ::Datang::RealStreamRespParam&) = 0;
};

typedef ::IceUtil::Handle< ::Datang::AMD_Operation_openRealStream> AMD_Operation_openRealStreamPtr;

class AMD_Operation_ptzControl : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Operation_ptzControl();

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Datang::AMD_Operation_ptzControl> AMD_Operation_ptzControlPtr;

class AMD_Operation_getDeviceInfo : public virtual ::Ice::AMDCallback
{
public:

    virtual ~AMD_Operation_getDeviceInfo();

    virtual void ice_response(const ::Datang::DeviceInfo&) = 0;
};

typedef ::IceUtil::Handle< ::Datang::AMD_Operation_getDeviceInfo> AMD_Operation_getDeviceInfoPtr;

}

namespace IceAsync
{

namespace Datang
{

class AMD_Operation_requsetCatalog : public ::Datang::AMD_Operation_requsetCatalog, public ::IceInternal::IncomingAsync
{
public:

    AMD_Operation_requsetCatalog(::IceInternal::Incoming&);

    virtual void ice_response(const ::Datang::CatalogList&);
};

class AMD_Operation_openRealStream : public ::Datang::AMD_Operation_openRealStream, public ::IceInternal::IncomingAsync
{
public:

    AMD_Operation_openRealStream(::IceInternal::Incoming&);

    virtual void ice_response(const ::Datang::RealStreamRespParam&);
};

class AMD_Operation_ptzControl : public ::Datang::AMD_Operation_ptzControl, public ::IceInternal::IncomingAsync
{
public:

    AMD_Operation_ptzControl(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_Operation_getDeviceInfo : public ::Datang::AMD_Operation_getDeviceInfo, public ::IceInternal::IncomingAsync
{
public:

    AMD_Operation_getDeviceInfo(::IceInternal::Incoming&);

    virtual void ice_response(const ::Datang::DeviceInfo&);
};

}

}

namespace Datang
{

class Callback_Operation_requsetCatalog_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_requsetCatalog_Base> Callback_Operation_requsetCatalogPtr;

class Callback_Operation_openRealStream_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_openRealStream_Base> Callback_Operation_openRealStreamPtr;

class Callback_Operation_ptzControl_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_ptzControl_Base> Callback_Operation_ptzControlPtr;

class Callback_Operation_getDeviceInfo_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_getDeviceInfo_Base> Callback_Operation_getDeviceInfoPtr;

class Callback_Operation_login_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_login_Base> Callback_Operation_loginPtr;

class Callback_Operation_shutdown_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_shutdown_Base> Callback_Operation_shutdownPtr;

}

namespace IceProxy
{

namespace Datang
{

class Operation : public virtual ::Ice::Proxy<Operation, ::IceProxy::Ice::Object>
{
public:

    void requsetCatalog(const ::std::string& iceP_id, ::Datang::CatalogList& iceP_catalogs, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_requsetCatalog(iceP_catalogs, _iceI_begin_requsetCatalog(iceP_id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_requsetCatalog(const ::std::string& iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_requsetCatalog(iceP_id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requsetCatalog(const ::std::string& iceP_id, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_requsetCatalog(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_requsetCatalog(const ::std::string& iceP_id, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_requsetCatalog(iceP_id, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_requsetCatalog(const ::std::string& iceP_id, const ::Datang::Callback_Operation_requsetCatalogPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_requsetCatalog(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_requsetCatalog(const ::std::string& iceP_id, const ::Ice::Context& context, const ::Datang::Callback_Operation_requsetCatalogPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_requsetCatalog(iceP_id, context, del, cookie);
    }

    void end_requsetCatalog(::Datang::CatalogList& iceP_catalogs, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_requsetCatalog(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void openRealStream(const ::Datang::RealStreamReqParam& iceP_req, ::Datang::RealStreamRespParam& iceP_resp, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_openRealStream(iceP_resp, _iceI_begin_openRealStream(iceP_req, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Datang::RealStreamReqParam& iceP_req, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_openRealStream(iceP_req, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Datang::RealStreamReqParam& iceP_req, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openRealStream(iceP_req, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Datang::RealStreamReqParam& iceP_req, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openRealStream(iceP_req, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Datang::RealStreamReqParam& iceP_req, const ::Datang::Callback_Operation_openRealStreamPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openRealStream(iceP_req, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Datang::RealStreamReqParam& iceP_req, const ::Ice::Context& context, const ::Datang::Callback_Operation_openRealStreamPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_openRealStream(iceP_req, context, del, cookie);
    }

    void end_openRealStream(::Datang::RealStreamRespParam& iceP_resp, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_openRealStream(const ::Datang::RealStreamReqParam&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void ptzControl(const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_ptzControl(_iceI_begin_ptzControl(iceP_id, iceP_cmd, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_ptzControl(const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_ptzControl(iceP_id, iceP_cmd, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ptzControl(const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ptzControl(iceP_id, iceP_cmd, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_ptzControl(const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ptzControl(iceP_id, iceP_cmd, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_ptzControl(const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Datang::Callback_Operation_ptzControlPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ptzControl(iceP_id, iceP_cmd, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_ptzControl(const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Ice::Context& context, const ::Datang::Callback_Operation_ptzControlPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_ptzControl(iceP_id, iceP_cmd, context, del, cookie);
    }

    void end_ptzControl(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_ptzControl(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getDeviceInfo(::Ice::Int iceP_id, ::Datang::DeviceInfo& iceP_info, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getDeviceInfo(iceP_info, _iceI_begin_getDeviceInfo(iceP_id, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getDeviceInfo(::Ice::Int iceP_id, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getDeviceInfo(iceP_id, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDeviceInfo(::Ice::Int iceP_id, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDeviceInfo(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDeviceInfo(::Ice::Int iceP_id, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDeviceInfo(iceP_id, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDeviceInfo(::Ice::Int iceP_id, const ::Datang::Callback_Operation_getDeviceInfoPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDeviceInfo(iceP_id, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDeviceInfo(::Ice::Int iceP_id, const ::Ice::Context& context, const ::Datang::Callback_Operation_getDeviceInfoPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDeviceInfo(iceP_id, context, del, cookie);
    }

    void end_getDeviceInfo(::Datang::DeviceInfo& iceP_info, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getDeviceInfo(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool login(const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_login(_iceI_begin_login(iceP_user, iceP_password, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_login(iceP_user, iceP_password, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_login(iceP_user, iceP_password, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_login(iceP_user, iceP_password, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Datang::Callback_Operation_loginPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_login(iceP_user, iceP_password, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context, const ::Datang::Callback_Operation_loginPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_login(iceP_user, iceP_password, context, del, cookie);
    }

    bool end_login(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_login(const ::std::string&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_shutdown(_iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_shutdown(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Datang::Callback_Operation_shutdownPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& context, const ::Datang::Callback_Operation_shutdownPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_shutdown(context, del, cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_shutdown(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace Datang
{

class Operation : public virtual ::Ice::Object
{
public:

    typedef OperationPrx ProxyType;
    typedef OperationPtr PointerType;

    virtual ~Operation();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void requsetCatalog_async(const ::Datang::AMD_Operation_requsetCatalogPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_requsetCatalog(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void openRealStream_async(const ::Datang::AMD_Operation_openRealStreamPtr&, const ::Datang::RealStreamReqParam&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_openRealStream(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ptzControl_async(const ::Datang::AMD_Operation_ptzControlPtr&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_ptzControl(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getDeviceInfo_async(const ::Datang::AMD_Operation_getDeviceInfoPtr&, ::Ice::Int, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getDeviceInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool login(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_login(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const Operation& lhs, const Operation& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Operation& lhs, const Operation& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::Datang::RequestCanceledException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Datang::DEVICETYPE>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Datang::DeviceInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Datang::DeviceInfo, S>
{
    static void write(S* ostr, const ::Datang::DeviceInfo& v)
    {
        ostr->write(v.id);
        ostr->write(v.name);
        ostr->write(v.sdk);
        ostr->write(v.type);
    }
};

template<typename S>
struct StreamReader< ::Datang::DeviceInfo, S>
{
    static void read(S* istr, ::Datang::DeviceInfo& v)
    {
        istr->read(v.id);
        istr->read(v.name);
        istr->read(v.sdk);
        istr->read(v.type);
    }
};

template<>
struct StreamableTraits< ::Datang::Catalog>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Datang::Catalog, S>
{
    static void write(S* ostr, const ::Datang::Catalog& v)
    {
        ostr->write(v.id);
        ostr->write(v.name);
        ostr->write(v.sdk);
        ostr->write(v.type);
    }
};

template<typename S>
struct StreamReader< ::Datang::Catalog, S>
{
    static void read(S* istr, ::Datang::Catalog& v)
    {
        istr->read(v.id);
        istr->read(v.name);
        istr->read(v.sdk);
        istr->read(v.type);
    }
};

template<>
struct StreamableTraits< ::Datang::RealStreamReqParam>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Datang::RealStreamReqParam, S>
{
    static void write(S* ostr, const ::Datang::RealStreamReqParam& v)
    {
        ostr->write(v.id);
        ostr->write(v.destip);
        ostr->write(v.destport);
        ostr->write(v.pt);
        ostr->write(v.ssrc);
    }
};

template<typename S>
struct StreamReader< ::Datang::RealStreamReqParam, S>
{
    static void read(S* istr, ::Datang::RealStreamReqParam& v)
    {
        istr->read(v.id);
        istr->read(v.destip);
        istr->read(v.destport);
        istr->read(v.pt);
        istr->read(v.ssrc);
    }
};

template<>
struct StreamableTraits< ::Datang::RealStreamRespParam>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::Datang::RealStreamRespParam, S>
{
    static void write(S* ostr, const ::Datang::RealStreamRespParam& v)
    {
        ostr->write(v.id);
        ostr->write(v.sourceip);
        ostr->write(v.sourceport);
    }
};

template<typename S>
struct StreamReader< ::Datang::RealStreamRespParam, S>
{
    static void read(S* istr, ::Datang::RealStreamRespParam& v)
    {
        istr->read(v.id);
        istr->read(v.sourceip);
        istr->read(v.sourceport);
    }
};

}

namespace Datang
{

template<class T>
class CallbackNC_Operation_requsetCatalog : public Callback_Operation_requsetCatalog_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Datang::CatalogList&);

    CallbackNC_Operation_requsetCatalog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Datang::OperationPrx proxy = ::Datang::OperationPrx::uncheckedCast(result->getProxy());
        ::Datang::CatalogList iceP_catalogs;
        try
        {
            proxy->end_requsetCatalog(iceP_catalogs, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_catalogs);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Operation_requsetCatalogPtr
newCallback_Operation_requsetCatalog(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Datang::CatalogList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_requsetCatalog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_requsetCatalogPtr
newCallback_Operation_requsetCatalog(T* instance, void (T::*cb)(const ::Datang::CatalogList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_requsetCatalog<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_requsetCatalog : public Callback_Operation_requsetCatalog_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Datang::CatalogList&, const CT&);

    Callback_Operation_requsetCatalog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Datang::OperationPrx proxy = ::Datang::OperationPrx::uncheckedCast(result->getProxy());
        ::Datang::CatalogList iceP_catalogs;
        try
        {
            proxy->end_requsetCatalog(iceP_catalogs, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_catalogs, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Operation_requsetCatalogPtr
newCallback_Operation_requsetCatalog(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Datang::CatalogList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_requsetCatalog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_requsetCatalogPtr
newCallback_Operation_requsetCatalog(T* instance, void (T::*cb)(const ::Datang::CatalogList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_requsetCatalog<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Operation_openRealStream : public Callback_Operation_openRealStream_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Datang::RealStreamRespParam&);

    CallbackNC_Operation_openRealStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Datang::OperationPrx proxy = ::Datang::OperationPrx::uncheckedCast(result->getProxy());
        ::Datang::RealStreamRespParam iceP_resp;
        try
        {
            proxy->end_openRealStream(iceP_resp, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_resp);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Operation_openRealStreamPtr
newCallback_Operation_openRealStream(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Datang::RealStreamRespParam&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_openRealStream<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_openRealStreamPtr
newCallback_Operation_openRealStream(T* instance, void (T::*cb)(const ::Datang::RealStreamRespParam&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_openRealStream<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_openRealStream : public Callback_Operation_openRealStream_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Datang::RealStreamRespParam&, const CT&);

    Callback_Operation_openRealStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Datang::OperationPrx proxy = ::Datang::OperationPrx::uncheckedCast(result->getProxy());
        ::Datang::RealStreamRespParam iceP_resp;
        try
        {
            proxy->end_openRealStream(iceP_resp, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_resp, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Operation_openRealStreamPtr
newCallback_Operation_openRealStream(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Datang::RealStreamRespParam&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_openRealStream<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_openRealStreamPtr
newCallback_Operation_openRealStream(T* instance, void (T::*cb)(const ::Datang::RealStreamRespParam&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_openRealStream<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Operation_ptzControl : public Callback_Operation_ptzControl_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Operation_ptzControl(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Datang::OperationPrx proxy = ::Datang::OperationPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_ptzControl(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_ptzControl<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_ptzControl<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_ptzControl<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_ptzControl<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_ptzControl : public Callback_Operation_ptzControl_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Operation_ptzControl(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Datang::OperationPrx proxy = ::Datang::OperationPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_ptzControl(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_ptzControl<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_ptzControl<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_ptzControl<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_ptzControl<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Operation_getDeviceInfo : public Callback_Operation_getDeviceInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Datang::DeviceInfo&);

    CallbackNC_Operation_getDeviceInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Datang::OperationPrx proxy = ::Datang::OperationPrx::uncheckedCast(result->getProxy());
        ::Datang::DeviceInfo iceP_info;
        try
        {
            proxy->end_getDeviceInfo(iceP_info, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_info);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Operation_getDeviceInfoPtr
newCallback_Operation_getDeviceInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Datang::DeviceInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_getDeviceInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_getDeviceInfoPtr
newCallback_Operation_getDeviceInfo(T* instance, void (T::*cb)(const ::Datang::DeviceInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_getDeviceInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_getDeviceInfo : public Callback_Operation_getDeviceInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Datang::DeviceInfo&, const CT&);

    Callback_Operation_getDeviceInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Datang::OperationPrx proxy = ::Datang::OperationPrx::uncheckedCast(result->getProxy());
        ::Datang::DeviceInfo iceP_info;
        try
        {
            proxy->end_getDeviceInfo(iceP_info, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_info, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Operation_getDeviceInfoPtr
newCallback_Operation_getDeviceInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Datang::DeviceInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_getDeviceInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_getDeviceInfoPtr
newCallback_Operation_getDeviceInfo(T* instance, void (T::*cb)(const ::Datang::DeviceInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_getDeviceInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Operation_login : public Callback_Operation_login_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Operation_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Datang::OperationPrx proxy = ::Datang::OperationPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_login(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Operation_loginPtr
newCallback_Operation_login(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_login<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_loginPtr
newCallback_Operation_login(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_login<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_login : public Callback_Operation_login_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Operation_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::Datang::OperationPrx proxy = ::Datang::OperationPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_login(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Operation_loginPtr
newCallback_Operation_login(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_login<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_loginPtr
newCallback_Operation_login(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_login<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Operation_shutdown : public Callback_Operation_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Operation_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_shutdown : public Callback_Operation_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Operation_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
