// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Operation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____generated_server_Operation_h__
#define ____generated_server_Operation_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Datang
{

class Operation;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Datang::Operation>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Datang::Operation*);

}

}

namespace Datang
{

class Operation;
::Ice::Object* upCast(::Datang::Operation*);
typedef ::IceInternal::Handle< ::Datang::Operation> OperationPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Datang::Operation> OperationPrx;
void __patch(OperationPtr&, const ::Ice::ObjectPtr&);

}

namespace Datang
{

class RequestCanceledException : public ::Ice::UserException
{
public:

    RequestCanceledException() {}
    virtual ~RequestCanceledException() throw();

    virtual ::std::string ice_name() const;
    virtual RequestCanceledException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

static RequestCanceledException __RequestCanceledException_init;

enum DEVICETYPE
{
    HAIKANG,
    DAHUA,
    YUSHI
};

struct DeviceInfo
{
    DeviceInfo() :
        type(HAIKANG)
    {
    }
    
    DeviceInfo(const ::std::string& __ice_id, const ::std::string& __ice_name, const ::std::string& __ice_sdk, ::Datang::DEVICETYPE __ice_type) :
        id(__ice_id),
        name(__ice_name),
        sdk(__ice_sdk),
        type(__ice_type)
    {
    }
    

    ::std::string id;
    ::std::string name;
    ::std::string sdk;
    ::Datang::DEVICETYPE type;

    bool operator==(const DeviceInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(sdk != __rhs.sdk)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        return true;
    }

    bool operator<(const DeviceInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(sdk < __rhs.sdk)
        {
            return true;
        }
        else if(__rhs.sdk < sdk)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const DeviceInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const DeviceInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const DeviceInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const DeviceInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct Catalog
{
    Catalog() :
        type(HAIKANG)
    {
    }
    
    Catalog(const ::std::string& __ice_id, const ::std::string& __ice_name, const ::std::string& __ice_sdk, ::Datang::DEVICETYPE __ice_type) :
        id(__ice_id),
        name(__ice_name),
        sdk(__ice_sdk),
        type(__ice_type)
    {
    }
    

    ::std::string id;
    ::std::string name;
    ::std::string sdk;
    ::Datang::DEVICETYPE type;

    bool operator==(const Catalog& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(sdk != __rhs.sdk)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Catalog& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(sdk < __rhs.sdk)
        {
            return true;
        }
        else if(__rhs.sdk < sdk)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Catalog& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Catalog& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Catalog& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Catalog& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct Stream
{
    ::std::string ip;
    ::std::string port;
    ::Ice::Int pt;

    bool operator==(const Stream& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(ip != __rhs.ip)
        {
            return false;
        }
        if(port != __rhs.port)
        {
            return false;
        }
        if(pt != __rhs.pt)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Stream& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(ip < __rhs.ip)
        {
            return true;
        }
        else if(__rhs.ip < ip)
        {
            return false;
        }
        if(port < __rhs.port)
        {
            return true;
        }
        else if(__rhs.port < port)
        {
            return false;
        }
        if(pt < __rhs.pt)
        {
            return true;
        }
        else if(__rhs.pt < pt)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Stream& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Stream& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Stream& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Stream& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::Datang::Catalog> CatalogList;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Datang::RequestCanceledException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Datang::DEVICETYPE>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::Datang::DeviceInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Datang::DeviceInfo, S>
{
    static void write(S* __os, const ::Datang::DeviceInfo& v)
    {
        __os->write(v.id);
        __os->write(v.name);
        __os->write(v.sdk);
        __os->write(v.type);
    }
};

template<class S>
struct StreamReader< ::Datang::DeviceInfo, S>
{
    static void read(S* __is, ::Datang::DeviceInfo& v)
    {
        __is->read(v.id);
        __is->read(v.name);
        __is->read(v.sdk);
        __is->read(v.type);
    }
};

template<>
struct StreamableTraits< ::Datang::Catalog>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Datang::Catalog, S>
{
    static void write(S* __os, const ::Datang::Catalog& v)
    {
        __os->write(v.id);
        __os->write(v.name);
        __os->write(v.sdk);
        __os->write(v.type);
    }
};

template<class S>
struct StreamReader< ::Datang::Catalog, S>
{
    static void read(S* __is, ::Datang::Catalog& v)
    {
        __is->read(v.id);
        __is->read(v.name);
        __is->read(v.sdk);
        __is->read(v.type);
    }
};

template<>
struct StreamableTraits< ::Datang::Stream>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Datang::Stream, S>
{
    static void write(S* __os, const ::Datang::Stream& v)
    {
        __os->write(v.ip);
        __os->write(v.port);
        __os->write(v.pt);
    }
};

template<class S>
struct StreamReader< ::Datang::Stream, S>
{
    static void read(S* __is, ::Datang::Stream& v)
    {
        __is->read(v.ip);
        __is->read(v.port);
        __is->read(v.pt);
    }
};

}

namespace Datang
{

class AMD_Operation_sayHello : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Datang::AMD_Operation_sayHello> AMD_Operation_sayHelloPtr;

class AMD_Operation_getName : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::string&) = 0;
};

typedef ::IceUtil::Handle< ::Datang::AMD_Operation_getName> AMD_Operation_getNamePtr;

class AMD_Operation_requsetCatalog : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Datang::CatalogList&) = 0;
};

typedef ::IceUtil::Handle< ::Datang::AMD_Operation_requsetCatalog> AMD_Operation_requsetCatalogPtr;

class AMD_Operation_openRealStream : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Datang::Stream&) = 0;
};

typedef ::IceUtil::Handle< ::Datang::AMD_Operation_openRealStream> AMD_Operation_openRealStreamPtr;

class AMD_Operation_ptzControl : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::Datang::AMD_Operation_ptzControl> AMD_Operation_ptzControlPtr;

class AMD_Operation_getDeviceInfo : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Datang::DeviceInfo&) = 0;
};

typedef ::IceUtil::Handle< ::Datang::AMD_Operation_getDeviceInfo> AMD_Operation_getDeviceInfoPtr;

}

namespace IceAsync
{

namespace Datang
{

class AMD_Operation_sayHello : public ::Datang::AMD_Operation_sayHello, public ::IceInternal::IncomingAsync
{
public:

    AMD_Operation_sayHello(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Operation_getName : public ::Datang::AMD_Operation_getName, public ::IceInternal::IncomingAsync
{
public:

    AMD_Operation_getName(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::string&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Operation_requsetCatalog : public ::Datang::AMD_Operation_requsetCatalog, public ::IceInternal::IncomingAsync
{
public:

    AMD_Operation_requsetCatalog(::IceInternal::Incoming&);

    virtual void ice_response(const ::Datang::CatalogList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Operation_openRealStream : public ::Datang::AMD_Operation_openRealStream, public ::IceInternal::IncomingAsync
{
public:

    AMD_Operation_openRealStream(::IceInternal::Incoming&);

    virtual void ice_response(const ::Datang::Stream&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Operation_ptzControl : public ::Datang::AMD_Operation_ptzControl, public ::IceInternal::IncomingAsync
{
public:

    AMD_Operation_ptzControl(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Operation_getDeviceInfo : public ::Datang::AMD_Operation_getDeviceInfo, public ::IceInternal::IncomingAsync
{
public:

    AMD_Operation_getDeviceInfo(::IceInternal::Incoming&);

    virtual void ice_response(const ::Datang::DeviceInfo&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

namespace Datang
{

class Callback_Operation_sayHello_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_sayHello_Base> Callback_Operation_sayHelloPtr;

class Callback_Operation_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_getName_Base> Callback_Operation_getNamePtr;

class Callback_Operation_requsetCatalog_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_requsetCatalog_Base> Callback_Operation_requsetCatalogPtr;

class Callback_Operation_openRealStream_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_openRealStream_Base> Callback_Operation_openRealStreamPtr;

class Callback_Operation_ptzControl_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_ptzControl_Base> Callback_Operation_ptzControlPtr;

class Callback_Operation_getDeviceInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_getDeviceInfo_Base> Callback_Operation_getDeviceInfoPtr;

class Callback_Operation_login_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_login_Base> Callback_Operation_loginPtr;

class Callback_Operation_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Operation_shutdown_Base> Callback_Operation_shutdownPtr;

}

namespace IceProxy
{

namespace Datang
{

class Operation : virtual public ::IceProxy::Ice::Object
{
public:

    void sayHello(::Ice::Int __p_delay)
    {
        sayHello(__p_delay, 0);
    }
    void sayHello(::Ice::Int __p_delay, const ::Ice::Context& __ctx)
    {
        sayHello(__p_delay, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sayHello(::Ice::Int __p_delay, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sayHello(__p_delay, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sayHello(::Ice::Int __p_delay, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sayHello(__p_delay, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sayHello(::Ice::Int __p_delay, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sayHello(__p_delay, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sayHello(::Ice::Int __p_delay, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sayHello(__p_delay, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sayHello(::Ice::Int __p_delay, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sayHello(::Ice::Int __p_delay)
    {
        return begin_sayHello(__p_delay, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sayHello(::Ice::Int __p_delay, const ::Ice::Context& __ctx)
    {
        return begin_sayHello(__p_delay, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sayHello(::Ice::Int __p_delay, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sayHello(__p_delay, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sayHello(::Ice::Int __p_delay, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sayHello(__p_delay, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sayHello(::Ice::Int __p_delay, const ::Datang::Callback_Operation_sayHelloPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sayHello(__p_delay, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sayHello(::Ice::Int __p_delay, const ::Ice::Context& __ctx, const ::Datang::Callback_Operation_sayHelloPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sayHello(__p_delay, &__ctx, __del, __cookie);
    }

    void end_sayHello(const ::Ice::AsyncResultPtr&);
    
private:

    void sayHello(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sayHello(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getName(::Ice::Int __p_id, ::std::string& __p_name)
    {
        getName(__p_id, __p_name, 0);
    }
    void getName(::Ice::Int __p_id, ::std::string& __p_name, const ::Ice::Context& __ctx)
    {
        getName(__p_id, __p_name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getName(::Ice::Int __p_id, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(::Ice::Int __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getName(::Ice::Int __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(::Ice::Int __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getName(::Ice::Int __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getName(::Ice::Int __p_id)
    {
        return begin_getName(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(::Ice::Int __p_id, const ::Ice::Context& __ctx)
    {
        return begin_getName(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(::Ice::Int __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(::Ice::Int __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(::Ice::Int __p_id, const ::Datang::Callback_Operation_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(::Ice::Int __p_id, const ::Ice::Context& __ctx, const ::Datang::Callback_Operation_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(__p_id, &__ctx, __del, __cookie);
    }

    void end_getName(::std::string& __p_name, const ::Ice::AsyncResultPtr&);
    
private:

    void getName(::Ice::Int, ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void requsetCatalog(const ::std::string& __p_id, ::Datang::CatalogList& __p_catalogs)
    {
        requsetCatalog(__p_id, __p_catalogs, 0);
    }
    void requsetCatalog(const ::std::string& __p_id, ::Datang::CatalogList& __p_catalogs, const ::Ice::Context& __ctx)
    {
        requsetCatalog(__p_id, __p_catalogs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_requsetCatalog(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Datang::CatalogList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requsetCatalog(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requsetCatalog(const ::std::string& __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requsetCatalog(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requsetCatalog(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Datang::CatalogList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requsetCatalog(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requsetCatalog(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requsetCatalog(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_requsetCatalog(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Datang::CatalogList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_requsetCatalog(const ::std::string& __p_id)
    {
        return begin_requsetCatalog(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requsetCatalog(const ::std::string& __p_id, const ::Ice::Context& __ctx)
    {
        return begin_requsetCatalog(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requsetCatalog(const ::std::string& __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requsetCatalog(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requsetCatalog(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requsetCatalog(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requsetCatalog(const ::std::string& __p_id, const ::Datang::Callback_Operation_requsetCatalogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requsetCatalog(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requsetCatalog(const ::std::string& __p_id, const ::Ice::Context& __ctx, const ::Datang::Callback_Operation_requsetCatalogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requsetCatalog(__p_id, &__ctx, __del, __cookie);
    }

    void end_requsetCatalog(::Datang::CatalogList& __p_catalogs, const ::Ice::AsyncResultPtr&);
    
private:

    void requsetCatalog(const ::std::string&, ::Datang::CatalogList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_requsetCatalog(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void openRealStream(const ::Datang::Catalog& __p_ctg, ::Datang::Stream& __p_stm)
    {
        openRealStream(__p_ctg, __p_stm, 0);
    }
    void openRealStream(const ::Datang::Catalog& __p_ctg, ::Datang::Stream& __p_stm, const ::Ice::Context& __ctx)
    {
        openRealStream(__p_ctg, __p_stm, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_openRealStream(const ::Datang::Catalog& __p_ctg, const ::IceInternal::Function<void (const ::Datang::Stream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_openRealStream(__p_ctg, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_openRealStream(const ::Datang::Catalog& __p_ctg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_openRealStream(__p_ctg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_openRealStream(const ::Datang::Catalog& __p_ctg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Datang::Stream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_openRealStream(__p_ctg, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_openRealStream(const ::Datang::Catalog& __p_ctg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_openRealStream(__p_ctg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_openRealStream(const ::Datang::Catalog& __p_ctg, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Datang::Stream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Datang::Catalog& __p_ctg)
    {
        return begin_openRealStream(__p_ctg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Datang::Catalog& __p_ctg, const ::Ice::Context& __ctx)
    {
        return begin_openRealStream(__p_ctg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Datang::Catalog& __p_ctg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openRealStream(__p_ctg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Datang::Catalog& __p_ctg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openRealStream(__p_ctg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Datang::Catalog& __p_ctg, const ::Datang::Callback_Operation_openRealStreamPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openRealStream(__p_ctg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_openRealStream(const ::Datang::Catalog& __p_ctg, const ::Ice::Context& __ctx, const ::Datang::Callback_Operation_openRealStreamPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_openRealStream(__p_ctg, &__ctx, __del, __cookie);
    }

    void end_openRealStream(::Datang::Stream& __p_stm, const ::Ice::AsyncResultPtr&);
    
private:

    void openRealStream(const ::Datang::Catalog&, ::Datang::Stream&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_openRealStream(const ::Datang::Catalog&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd)
    {
        ptzControl(__p_ctg, __p_cmd, 0);
    }
    void ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::Ice::Context& __ctx)
    {
        ptzControl(__p_ctg, __p_cmd, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ptzControl(__p_ctg, __p_cmd, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ptzControl(__p_ctg, __p_cmd, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ptzControl(__p_ctg, __p_cmd, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ptzControl(__p_ctg, __p_cmd, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd)
    {
        return begin_ptzControl(__p_ctg, __p_cmd, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::Ice::Context& __ctx)
    {
        return begin_ptzControl(__p_ctg, __p_cmd, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ptzControl(__p_ctg, __p_cmd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ptzControl(__p_ctg, __p_cmd, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::Datang::Callback_Operation_ptzControlPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ptzControl(__p_ctg, __p_cmd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::Ice::Context& __ctx, const ::Datang::Callback_Operation_ptzControlPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ptzControl(__p_ctg, __p_cmd, &__ctx, __del, __cookie);
    }

    void end_ptzControl(const ::Ice::AsyncResultPtr&);
    
private:

    void ptzControl(const ::Datang::Catalog&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ptzControl(const ::Datang::Catalog&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getDeviceInfo(::Ice::Int __p_id, ::Datang::DeviceInfo& __p_info)
    {
        getDeviceInfo(__p_id, __p_info, 0);
    }
    void getDeviceInfo(::Ice::Int __p_id, ::Datang::DeviceInfo& __p_info, const ::Ice::Context& __ctx)
    {
        getDeviceInfo(__p_id, __p_info, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDeviceInfo(::Ice::Int __p_id, const ::IceInternal::Function<void (const ::Datang::DeviceInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDeviceInfo(__p_id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDeviceInfo(::Ice::Int __p_id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDeviceInfo(__p_id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDeviceInfo(::Ice::Int __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Datang::DeviceInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDeviceInfo(__p_id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDeviceInfo(::Ice::Int __p_id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDeviceInfo(__p_id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDeviceInfo(::Ice::Int __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Datang::DeviceInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDeviceInfo(::Ice::Int __p_id)
    {
        return begin_getDeviceInfo(__p_id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDeviceInfo(::Ice::Int __p_id, const ::Ice::Context& __ctx)
    {
        return begin_getDeviceInfo(__p_id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDeviceInfo(::Ice::Int __p_id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDeviceInfo(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDeviceInfo(::Ice::Int __p_id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDeviceInfo(__p_id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDeviceInfo(::Ice::Int __p_id, const ::Datang::Callback_Operation_getDeviceInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDeviceInfo(__p_id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDeviceInfo(::Ice::Int __p_id, const ::Ice::Context& __ctx, const ::Datang::Callback_Operation_getDeviceInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDeviceInfo(__p_id, &__ctx, __del, __cookie);
    }

    void end_getDeviceInfo(::Datang::DeviceInfo& __p_info, const ::Ice::AsyncResultPtr&);
    
private:

    void getDeviceInfo(::Ice::Int, ::Datang::DeviceInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDeviceInfo(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool login(const ::std::string& __p_user, const ::std::string& __p_password)
    {
        return login(__p_user, __p_password, 0);
    }
    bool login(const ::std::string& __p_user, const ::std::string& __p_password, const ::Ice::Context& __ctx)
    {
        return login(__p_user, __p_password, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_login(const ::std::string& __p_user, const ::std::string& __p_password, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_login(__p_user, __p_password, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_login(const ::std::string& __p_user, const ::std::string& __p_password, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_login(__p_user, __p_password, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_login(const ::std::string& __p_user, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_login(__p_user, __p_password, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_login(const ::std::string& __p_user, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_login(__p_user, __p_password, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_login(const ::std::string& __p_user, const ::std::string& __p_password, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_login(const ::std::string& __p_user, const ::std::string& __p_password)
    {
        return begin_login(__p_user, __p_password, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& __p_user, const ::std::string& __p_password, const ::Ice::Context& __ctx)
    {
        return begin_login(__p_user, __p_password, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& __p_user, const ::std::string& __p_password, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(__p_user, __p_password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& __p_user, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(__p_user, __p_password, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& __p_user, const ::std::string& __p_password, const ::Datang::Callback_Operation_loginPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(__p_user, __p_password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& __p_user, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::Datang::Callback_Operation_loginPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(__p_user, __p_password, &__ctx, __del, __cookie);
    }

    bool end_login(const ::Ice::AsyncResultPtr&);
    
private:

    bool login(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_login(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Datang::Callback_Operation_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Datang::Callback_Operation_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Operation> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_secure(bool __secure) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_twoway() const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_oneway() const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_batchOneway() const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_datagram() const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_batchDatagram() const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_compress(bool __compress) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Operation> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Operation*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace Datang
{

class Operation : virtual public ::Ice::Object
{
public:

    typedef OperationPrx ProxyType;
    typedef OperationPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void sayHello_async(const ::Datang::AMD_Operation_sayHelloPtr&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sayHello(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getName_async(const ::Datang::AMD_Operation_getNamePtr&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void requsetCatalog_async(const ::Datang::AMD_Operation_requsetCatalogPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___requsetCatalog(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void openRealStream_async(const ::Datang::AMD_Operation_openRealStreamPtr&, const ::Datang::Catalog&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___openRealStream(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ptzControl_async(const ::Datang::AMD_Operation_ptzControlPtr&, const ::Datang::Catalog&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ptzControl(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getDeviceInfo_async(const ::Datang::AMD_Operation_getDeviceInfoPtr&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDeviceInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool login(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___login(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Operation& l, const Operation& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Operation& l, const Operation& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Datang
{

template<class T>
class CallbackNC_Operation_sayHello : public Callback_Operation_sayHello_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Operation_sayHello(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_sayHello(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Operation_sayHelloPtr
newCallback_Operation_sayHello(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_sayHello<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_sayHelloPtr
newCallback_Operation_sayHello(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_sayHello<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Operation_sayHelloPtr
newCallback_Operation_sayHello(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_sayHello<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_sayHelloPtr
newCallback_Operation_sayHello(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_sayHello<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_sayHello : public Callback_Operation_sayHello_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Operation_sayHello(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_sayHello(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Operation_sayHelloPtr
newCallback_Operation_sayHello(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_sayHello<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_sayHelloPtr
newCallback_Operation_sayHello(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_sayHello<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_sayHelloPtr
newCallback_Operation_sayHello(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_sayHello<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_sayHelloPtr
newCallback_Operation_sayHello(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_sayHello<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Operation_getName : public Callback_Operation_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Operation_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        ::std::string name;
        try
        {
            __proxy->end_getName(name, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(name);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Operation_getNamePtr
newCallback_Operation_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_getNamePtr
newCallback_Operation_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_getName : public Callback_Operation_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Operation_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        ::std::string name;
        try
        {
            __proxy->end_getName(name, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(name, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Operation_getNamePtr
newCallback_Operation_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_getNamePtr
newCallback_Operation_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Operation_requsetCatalog : public Callback_Operation_requsetCatalog_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Datang::CatalogList&);

    CallbackNC_Operation_requsetCatalog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        ::Datang::CatalogList catalogs;
        try
        {
            __proxy->end_requsetCatalog(catalogs, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(catalogs);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Operation_requsetCatalogPtr
newCallback_Operation_requsetCatalog(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Datang::CatalogList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_requsetCatalog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_requsetCatalogPtr
newCallback_Operation_requsetCatalog(T* instance, void (T::*cb)(const ::Datang::CatalogList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_requsetCatalog<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_requsetCatalog : public Callback_Operation_requsetCatalog_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Datang::CatalogList&, const CT&);

    Callback_Operation_requsetCatalog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        ::Datang::CatalogList catalogs;
        try
        {
            __proxy->end_requsetCatalog(catalogs, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(catalogs, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Operation_requsetCatalogPtr
newCallback_Operation_requsetCatalog(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Datang::CatalogList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_requsetCatalog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_requsetCatalogPtr
newCallback_Operation_requsetCatalog(T* instance, void (T::*cb)(const ::Datang::CatalogList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_requsetCatalog<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Operation_openRealStream : public Callback_Operation_openRealStream_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Datang::Stream&);

    CallbackNC_Operation_openRealStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        ::Datang::Stream stm;
        try
        {
            __proxy->end_openRealStream(stm, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(stm);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Operation_openRealStreamPtr
newCallback_Operation_openRealStream(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Datang::Stream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_openRealStream<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_openRealStreamPtr
newCallback_Operation_openRealStream(T* instance, void (T::*cb)(const ::Datang::Stream&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_openRealStream<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_openRealStream : public Callback_Operation_openRealStream_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Datang::Stream&, const CT&);

    Callback_Operation_openRealStream(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        ::Datang::Stream stm;
        try
        {
            __proxy->end_openRealStream(stm, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(stm, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Operation_openRealStreamPtr
newCallback_Operation_openRealStream(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Datang::Stream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_openRealStream<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_openRealStreamPtr
newCallback_Operation_openRealStream(T* instance, void (T::*cb)(const ::Datang::Stream&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_openRealStream<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Operation_ptzControl : public Callback_Operation_ptzControl_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Operation_ptzControl(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_ptzControl(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_ptzControl<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_ptzControl<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_ptzControl<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_ptzControl<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_ptzControl : public Callback_Operation_ptzControl_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Operation_ptzControl(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_ptzControl(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_ptzControl<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_ptzControl<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_ptzControl<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_ptzControlPtr
newCallback_Operation_ptzControl(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_ptzControl<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Operation_getDeviceInfo : public Callback_Operation_getDeviceInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Datang::DeviceInfo&);

    CallbackNC_Operation_getDeviceInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        ::Datang::DeviceInfo info;
        try
        {
            __proxy->end_getDeviceInfo(info, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(info);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Operation_getDeviceInfoPtr
newCallback_Operation_getDeviceInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Datang::DeviceInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_getDeviceInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_getDeviceInfoPtr
newCallback_Operation_getDeviceInfo(T* instance, void (T::*cb)(const ::Datang::DeviceInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_getDeviceInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_getDeviceInfo : public Callback_Operation_getDeviceInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Datang::DeviceInfo&, const CT&);

    Callback_Operation_getDeviceInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        ::Datang::DeviceInfo info;
        try
        {
            __proxy->end_getDeviceInfo(info, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(info, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Operation_getDeviceInfoPtr
newCallback_Operation_getDeviceInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Datang::DeviceInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_getDeviceInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_getDeviceInfoPtr
newCallback_Operation_getDeviceInfo(T* instance, void (T::*cb)(const ::Datang::DeviceInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_getDeviceInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Operation_login : public Callback_Operation_login_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Operation_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_login(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Operation_loginPtr
newCallback_Operation_login(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_login<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_loginPtr
newCallback_Operation_login(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_login<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_login : public Callback_Operation_login_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Operation_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_login(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Operation_loginPtr
newCallback_Operation_login(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_login<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_loginPtr
newCallback_Operation_login(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_login<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Operation_shutdown : public Callback_Operation_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Operation_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Operation_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Operation_shutdown : public Callback_Operation_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Operation_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Operation_shutdownPtr
newCallback_Operation_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Operation_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
