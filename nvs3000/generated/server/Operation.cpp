// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Operation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Operation.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Datang__Operation__sayHello_name = "sayHello";

const ::std::string __Datang__Operation__getName_name = "getName";

const ::std::string __Datang__Operation__requsetCatalog_name = "requsetCatalog";

const ::std::string __Datang__Operation__openRealStream_name = "openRealStream";

const ::std::string __Datang__Operation__ptzControl_name = "ptzControl";

const ::std::string __Datang__Operation__getDeviceInfo_name = "getDeviceInfo";

const ::std::string __Datang__Operation__login_name = "login";

const ::std::string __Datang__Operation__shutdown_name = "shutdown";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Datang::RequestCanceledException> __Datang__RequestCanceledException_init("::Datang::RequestCanceledException");

}

Datang::RequestCanceledException::~RequestCanceledException() throw()
{
}

::std::string
Datang::RequestCanceledException::ice_name() const
{
    return "Datang::RequestCanceledException";
}

Datang::RequestCanceledException*
Datang::RequestCanceledException::ice_clone() const
{
    return new RequestCanceledException(*this);
}

void
Datang::RequestCanceledException::ice_throw() const
{
    throw *this;
}

void
Datang::RequestCanceledException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Datang::RequestCanceledException", -1, true);
    __os->endWriteSlice();
}

void
Datang::RequestCanceledException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace Ice
{
}

IceAsync::Datang::AMD_Operation_sayHello::AMD_Operation_sayHello(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Datang::AMD_Operation_sayHello::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

void
IceAsync::Datang::AMD_Operation_sayHello::ice_exception(const ::std::exception& ex)
{
    if(const ::Datang::RequestCanceledException* __ex = dynamic_cast<const ::Datang::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::Datang::AMD_Operation_getName::AMD_Operation_getName(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Datang::AMD_Operation_getName::ice_response(const ::std::string& name)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(name);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::Datang::AMD_Operation_getName::ice_exception(const ::std::exception& ex)
{
    if(const ::Datang::RequestCanceledException* __ex = dynamic_cast<const ::Datang::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::Datang::AMD_Operation_requsetCatalog::AMD_Operation_requsetCatalog(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Datang::AMD_Operation_requsetCatalog::ice_response(const ::Datang::CatalogList& catalogs)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(catalogs);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::Datang::AMD_Operation_requsetCatalog::ice_exception(const ::std::exception& ex)
{
    if(const ::Datang::RequestCanceledException* __ex = dynamic_cast<const ::Datang::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::Datang::AMD_Operation_openRealStream::AMD_Operation_openRealStream(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Datang::AMD_Operation_openRealStream::ice_response(const ::Datang::Stream& stm)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(stm);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::Datang::AMD_Operation_openRealStream::ice_exception(const ::std::exception& ex)
{
    if(const ::Datang::RequestCanceledException* __ex = dynamic_cast<const ::Datang::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::Datang::AMD_Operation_ptzControl::AMD_Operation_ptzControl(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Datang::AMD_Operation_ptzControl::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

void
IceAsync::Datang::AMD_Operation_ptzControl::ice_exception(const ::std::exception& ex)
{
    if(const ::Datang::RequestCanceledException* __ex = dynamic_cast<const ::Datang::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::Datang::AMD_Operation_getDeviceInfo::AMD_Operation_getDeviceInfo(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Datang::AMD_Operation_getDeviceInfo::ice_response(const ::Datang::DeviceInfo& info)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(info);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::Datang::AMD_Operation_getDeviceInfo::ice_exception(const ::std::exception& ex)
{
    if(const ::Datang::RequestCanceledException* __ex = dynamic_cast<const ::Datang::RequestCanceledException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}
::IceProxy::Ice::Object* ::IceProxy::Datang::upCast(::IceProxy::Datang::Operation* p) { return p; }

void
::IceProxy::Datang::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Datang::Operation>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Datang::Operation;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Datang::Operation::sayHello(::Ice::Int __p_delay, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Datang__Operation__sayHello_name);
    ::IceInternal::Outgoing __og(this, __Datang__Operation__sayHello_name, ::Ice::Idempotent, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_delay);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::begin_sayHello(::Ice::Int __p_delay, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Datang__Operation__sayHello_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Datang__Operation__sayHello_name, __del, __cookie);
    try
    {
        __result->prepare(__Datang__Operation__sayHello_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_delay);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::__begin_sayHello(::Ice::Int __p_delay, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_sayHello(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_sayHello(__p_delay, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Datang::Operation::end_sayHello(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Datang__Operation__sayHello_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::Datang::Operation::getName(::Ice::Int __p_id, ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Datang__Operation__getName_name);
    ::IceInternal::Outgoing __og(this, __Datang__Operation__getName_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_name);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::begin_getName(::Ice::Int __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Datang__Operation__getName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Datang__Operation__getName_name, __del, __cookie);
    try
    {
        __result->prepare(__Datang__Operation__getName_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::__begin_getName(::Ice::Int __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
            ::std::string __p_name;
            try
            {
                __proxy->end_getName(__p_name, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_name);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_getName(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Datang::Operation::end_getName(::std::string& __p_name, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Datang__Operation__getName_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_name);
    __result->__endReadParams();
}

void
IceProxy::Datang::Operation::requsetCatalog(const ::std::string& __p_id, ::Datang::CatalogList& __p_catalogs, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Datang__Operation__requsetCatalog_name);
    ::IceInternal::Outgoing __og(this, __Datang__Operation__requsetCatalog_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_catalogs);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::begin_requsetCatalog(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Datang__Operation__requsetCatalog_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Datang__Operation__requsetCatalog_name, __del, __cookie);
    try
    {
        __result->prepare(__Datang__Operation__requsetCatalog_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::__begin_requsetCatalog(const ::std::string& __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Datang::CatalogList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Datang::CatalogList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
            ::Datang::CatalogList __p_catalogs;
            try
            {
                __proxy->end_requsetCatalog(__p_catalogs, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_catalogs);
            }
        }
    
    private:
        
        ::std::function<void (const ::Datang::CatalogList&)> _response;
    };
    return begin_requsetCatalog(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Datang::Operation::end_requsetCatalog(::Datang::CatalogList& __p_catalogs, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Datang__Operation__requsetCatalog_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_catalogs);
    __result->__endReadParams();
}

void
IceProxy::Datang::Operation::openRealStream(const ::Datang::Catalog& __p_ctg, ::Datang::Stream& __p_stm, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Datang__Operation__openRealStream_name);
    ::IceInternal::Outgoing __og(this, __Datang__Operation__openRealStream_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ctg);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_stm);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::begin_openRealStream(const ::Datang::Catalog& __p_ctg, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Datang__Operation__openRealStream_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Datang__Operation__openRealStream_name, __del, __cookie);
    try
    {
        __result->prepare(__Datang__Operation__openRealStream_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ctg);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::__begin_openRealStream(const ::Datang::Catalog& __p_ctg, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Datang::Stream&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Datang::Stream&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
            ::Datang::Stream __p_stm;
            try
            {
                __proxy->end_openRealStream(__p_stm, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_stm);
            }
        }
    
    private:
        
        ::std::function<void (const ::Datang::Stream&)> _response;
    };
    return begin_openRealStream(__p_ctg, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Datang::Operation::end_openRealStream(::Datang::Stream& __p_stm, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Datang__Operation__openRealStream_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_stm);
    __result->__endReadParams();
}

void
IceProxy::Datang::Operation::ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Datang__Operation__ptzControl_name);
    ::IceInternal::Outgoing __og(this, __Datang__Operation__ptzControl_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ctg);
        __os->write(__p_cmd);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::begin_ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Datang__Operation__ptzControl_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Datang__Operation__ptzControl_name, __del, __cookie);
    try
    {
        __result->prepare(__Datang__Operation__ptzControl_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_ctg);
        __os->write(__p_cmd);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::__begin_ptzControl(const ::Datang::Catalog& __p_ctg, const ::std::string& __p_cmd, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_ptzControl(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_ptzControl(__p_ctg, __p_cmd, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Datang::Operation::end_ptzControl(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Datang__Operation__ptzControl_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::Datang::Operation::getDeviceInfo(::Ice::Int __p_id, ::Datang::DeviceInfo& __p_info, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Datang__Operation__getDeviceInfo_name);
    ::IceInternal::Outgoing __og(this, __Datang__Operation__getDeviceInfo_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_info);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::begin_getDeviceInfo(::Ice::Int __p_id, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Datang__Operation__getDeviceInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Datang__Operation__getDeviceInfo_name, __del, __cookie);
    try
    {
        __result->prepare(__Datang__Operation__getDeviceInfo_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_id);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::__begin_getDeviceInfo(::Ice::Int __p_id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Datang::DeviceInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Datang::DeviceInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
            ::Datang::DeviceInfo __p_info;
            try
            {
                __proxy->end_getDeviceInfo(__p_info, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_info);
            }
        }
    
    private:
        
        ::std::function<void (const ::Datang::DeviceInfo&)> _response;
    };
    return begin_getDeviceInfo(__p_id, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Datang::Operation::end_getDeviceInfo(::Datang::DeviceInfo& __p_info, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Datang__Operation__getDeviceInfo_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_info);
    __result->__endReadParams();
}

bool
IceProxy::Datang::Operation::login(const ::std::string& __p_user, const ::std::string& __p_password, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Datang__Operation__login_name);
    ::IceInternal::Outgoing __og(this, __Datang__Operation__login_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_user);
        __os->write(__p_password);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    bool __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::begin_login(const ::std::string& __p_user, const ::std::string& __p_password, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Datang__Operation__login_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Datang__Operation__login_name, __del, __cookie);
    try
    {
        __result->prepare(__Datang__Operation__login_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_user);
        __os->write(__p_password);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::__begin_login(const ::std::string& __p_user, const ::std::string& __p_password, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Datang::OperationPrx __proxy = ::Datang::OperationPrx::uncheckedCast(__result->getProxy());
            bool __ret;
            try
            {
                __ret = __proxy->end_login(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (bool)> _response;
    };
    return begin_login(__p_user, __p_password, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

bool
IceProxy::Datang::Operation::end_login(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Datang__Operation__login_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Datang::Operation::shutdown(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Datang__Operation__shutdown_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::begin_shutdown(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Datang__Operation__shutdown_name, __del, __cookie);
    try
    {
        __result->prepare(__Datang__Operation__shutdown_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Datang::Operation::end_shutdown(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Datang__Operation__shutdown_name);
}

const ::std::string&
IceProxy::Datang::Operation::ice_staticId()
{
    return ::Datang::Operation::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Datang::Operation::__newInstance() const
{
    return new Operation;
}

::Ice::Object* Datang::upCast(::Datang::Operation* p) { return p; }

namespace
{
const ::std::string __Datang__Operation_ids[2] =
{
    "::Datang::Operation",
    "::Ice::Object"
};

}

bool
Datang::Operation::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Datang__Operation_ids, __Datang__Operation_ids + 2, _s);
}

::std::vector< ::std::string>
Datang::Operation::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Datang__Operation_ids[0], &__Datang__Operation_ids[2]);
}

const ::std::string&
Datang::Operation::ice_id(const ::Ice::Current&) const
{
    return __Datang__Operation_ids[0];
}

const ::std::string&
Datang::Operation::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Datang::Operation";
    return typeId;
#else
    return __Datang__Operation_ids[0];
#endif
}

::Ice::DispatchStatus
Datang::Operation::___sayHello(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_delay;
    __is->read(__p_delay);
    __inS.endReadParams();
    ::Datang::AMD_Operation_sayHelloPtr __cb = new IceAsync::Datang::AMD_Operation_sayHello(__inS);
    try
    {
        sayHello_async(__cb, __p_delay, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Datang::Operation::___getName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::Datang::AMD_Operation_getNamePtr __cb = new IceAsync::Datang::AMD_Operation_getName(__inS);
    try
    {
        getName_async(__cb, __p_id, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Datang::Operation::___requsetCatalog(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::Datang::AMD_Operation_requsetCatalogPtr __cb = new IceAsync::Datang::AMD_Operation_requsetCatalog(__inS);
    try
    {
        requsetCatalog_async(__cb, __p_id, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Datang::Operation::___openRealStream(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Datang::Catalog __p_ctg;
    __is->read(__p_ctg);
    __inS.endReadParams();
    ::Datang::AMD_Operation_openRealStreamPtr __cb = new IceAsync::Datang::AMD_Operation_openRealStream(__inS);
    try
    {
        openRealStream_async(__cb, __p_ctg, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Datang::Operation::___ptzControl(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Datang::Catalog __p_ctg;
    ::std::string __p_cmd;
    __is->read(__p_ctg);
    __is->read(__p_cmd);
    __inS.endReadParams();
    ::Datang::AMD_Operation_ptzControlPtr __cb = new IceAsync::Datang::AMD_Operation_ptzControl(__inS);
    try
    {
        ptzControl_async(__cb, __p_ctg, __p_cmd, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Datang::Operation::___getDeviceInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_id;
    __is->read(__p_id);
    __inS.endReadParams();
    ::Datang::AMD_Operation_getDeviceInfoPtr __cb = new IceAsync::Datang::AMD_Operation_getDeviceInfo(__inS);
    try
    {
        getDeviceInfo_async(__cb, __p_id, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
Datang::Operation::___login(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_user;
    ::std::string __p_password;
    __is->read(__p_user);
    __is->read(__p_password);
    __inS.endReadParams();
    bool __ret = login(__p_user, __p_password, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Datang::Operation::___shutdown(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    shutdown(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Datang__Operation_all[] =
{
    "getDeviceInfo",
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "login",
    "openRealStream",
    "ptzControl",
    "requsetCatalog",
    "sayHello",
    "shutdown"
};

}

::Ice::DispatchStatus
Datang::Operation::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Datang__Operation_all, __Datang__Operation_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Datang__Operation_all)
    {
        case 0:
        {
            return ___getDeviceInfo(in, current);
        }
        case 1:
        {
            return ___getName(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___login(in, current);
        }
        case 7:
        {
            return ___openRealStream(in, current);
        }
        case 8:
        {
            return ___ptzControl(in, current);
        }
        case 9:
        {
            return ___requsetCatalog(in, current);
        }
        case 10:
        {
            return ___sayHello(in, current);
        }
        case 11:
        {
            return ___shutdown(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Datang::Operation::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Datang::Operation::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Datang::__patch(OperationPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Datang::OperationPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Datang::Operation::ice_staticId(), v);
    }
}
