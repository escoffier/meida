// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Operation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Operation.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Datang::RequestCanceledException> iceC_Datang_RequestCanceledException_init("::Datang::RequestCanceledException");

const ::std::string iceC_Datang_Operation_ids[2] =
{
    "::Datang::Operation",
    "::Ice::Object"
};
const ::std::string iceC_Datang_Operation_ops[] =
{
    "getDeviceInfo",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "login",
    "openRealStream",
    "ptzControl",
    "requsetCatalog",
    "shutdown"
};
const ::std::string iceC_Datang_Operation_requsetCatalog_name = "requsetCatalog";
const ::std::string iceC_Datang_Operation_openRealStream_name = "openRealStream";
const ::std::string iceC_Datang_Operation_ptzControl_name = "ptzControl";
const ::std::string iceC_Datang_Operation_getDeviceInfo_name = "getDeviceInfo";
const ::std::string iceC_Datang_Operation_login_name = "login";
const ::std::string iceC_Datang_Operation_shutdown_name = "shutdown";

}

Datang::RequestCanceledException::~RequestCanceledException()
{
}

const ::std::string&
Datang::RequestCanceledException::ice_staticId()
{
    static const ::std::string typeId = "::Datang::RequestCanceledException";
    return typeId;
}

bool
Datang::Operation::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Datang_Operation_ids, iceC_Datang_Operation_ids + 2, s);
}

::std::vector<::std::string>
Datang::Operation::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Datang_Operation_ids[0], &iceC_Datang_Operation_ids[2]);
}

::std::string
Datang::Operation::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Datang::Operation::ice_staticId()
{
    static const ::std::string typeId = "::Datang::Operation";
    return typeId;
}

bool
Datang::Operation::_iceD_requsetCatalog(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::Datang::CatalogList& iceP_catalogs)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_catalogs);
        inA->endWriteParams();
        inA->completed();
    };
    this->requsetCatalogAsync(::std::move(iceP_id), responseCB, inA->exception(), current);
    return false;
}

bool
Datang::Operation::_iceD_openRealStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Datang::RealStreamReqParam iceP_req;
    istr->readAll(iceP_req);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::Datang::RealStreamRespParam& iceP_resp)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_resp);
        inA->endWriteParams();
        inA->completed();
    };
    this->openRealStreamAsync(::std::move(iceP_req), responseCB, inA->exception(), current);
    return false;
}

bool
Datang::Operation::_iceD_ptzControl(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    ::std::string iceP_cmd;
    istr->readAll(iceP_id, iceP_cmd);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->ptzControlAsync(::std::move(iceP_id), ::std::move(iceP_cmd), inA->response(), inA->exception(), current);
    return false;
}

bool
Datang::Operation::_iceD_getDeviceInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::Datang::DeviceInfo& iceP_info)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_info);
        inA->endWriteParams();
        inA->completed();
    };
    this->getDeviceInfoAsync(iceP_id, responseCB, inA->exception(), current);
    return false;
}

bool
Datang::Operation::_iceD_login(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_user;
    ::std::string iceP_password;
    istr->readAll(iceP_user, iceP_password);
    inS.endReadParams();
    bool ret = this->login(::std::move(iceP_user), ::std::move(iceP_password), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Datang::Operation::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}

bool
Datang::Operation::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Datang_Operation_ops, iceC_Datang_Operation_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Datang_Operation_ops)
    {
        case 0:
        {
            return _iceD_getDeviceInfo(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_login(in, current);
        }
        case 6:
        {
            return _iceD_openRealStream(in, current);
        }
        case 7:
        {
            return _iceD_ptzControl(in, current);
        }
        case 8:
        {
            return _iceD_requsetCatalog(in, current);
        }
        case 9:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
Datang::OperationPrx::_iceI_requsetCatalog(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Datang::CatalogList>>& outAsync, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Datang_Operation_requsetCatalog_name);
    outAsync->invoke(iceC_Datang_Operation_requsetCatalog_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Datang::RequestCanceledException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Datang::OperationPrx::_iceI_openRealStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Datang::RealStreamRespParam>>& outAsync, const ::Datang::RealStreamReqParam& iceP_req, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Datang_Operation_openRealStream_name);
    outAsync->invoke(iceC_Datang_Operation_openRealStream_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_req);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Datang::RequestCanceledException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Datang::OperationPrx::_iceI_ptzControl(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Datang_Operation_ptzControl_name);
    outAsync->invoke(iceC_Datang_Operation_ptzControl_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id, iceP_cmd);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Datang::RequestCanceledException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Datang::OperationPrx::_iceI_getDeviceInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Datang::DeviceInfo>>& outAsync, int iceP_id, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Datang_Operation_getDeviceInfo_name);
    outAsync->invoke(iceC_Datang_Operation_getDeviceInfo_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Datang::RequestCanceledException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Datang::OperationPrx::_iceI_login(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Datang_Operation_login_name);
    outAsync->invoke(iceC_Datang_Operation_login_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user, iceP_password);
        },
        nullptr);
}

void
Datang::OperationPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Datang_Operation_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
Datang::OperationPrx::_newInstance() const
{
    return ::IceInternal::createProxy<OperationPrx>();
}

const ::std::string&
Datang::OperationPrx::ice_staticId()
{
    return Datang::Operation::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Datang_Operation_requsetCatalog_name = "requsetCatalog";

const ::std::string iceC_Datang_Operation_openRealStream_name = "openRealStream";

const ::std::string iceC_Datang_Operation_ptzControl_name = "ptzControl";

const ::std::string iceC_Datang_Operation_getDeviceInfo_name = "getDeviceInfo";

const ::std::string iceC_Datang_Operation_login_name = "login";

const ::std::string iceC_Datang_Operation_shutdown_name = "shutdown";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Datang::RequestCanceledException> iceC_Datang_RequestCanceledException_init("::Datang::RequestCanceledException");

}

Datang::RequestCanceledException::~RequestCanceledException() throw()
{
}

::std::string
Datang::RequestCanceledException::ice_id() const
{
    return "::Datang::RequestCanceledException";
}

Datang::RequestCanceledException*
Datang::RequestCanceledException::ice_clone() const
{
    return new RequestCanceledException(*this);
}

void
Datang::RequestCanceledException::ice_throw() const
{
    throw *this;
}

void
Datang::RequestCanceledException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Datang::RequestCanceledException", -1, true);
    Ice::StreamWriter< ::Datang::RequestCanceledException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Datang::RequestCanceledException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Datang::RequestCanceledException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

Datang::AMD_Operation_requsetCatalog::~AMD_Operation_requsetCatalog()
{
}

Datang::AMD_Operation_openRealStream::~AMD_Operation_openRealStream()
{
}

Datang::AMD_Operation_ptzControl::~AMD_Operation_ptzControl()
{
}

Datang::AMD_Operation_getDeviceInfo::~AMD_Operation_getDeviceInfo()
{
}

IceAsync::Datang::AMD_Operation_requsetCatalog::AMD_Operation_requsetCatalog(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Datang::AMD_Operation_requsetCatalog::ice_response(const ::Datang::CatalogList& catalogs)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(catalogs);
    endWriteParams();
    completed();
}

IceAsync::Datang::AMD_Operation_openRealStream::AMD_Operation_openRealStream(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Datang::AMD_Operation_openRealStream::ice_response(const ::Datang::RealStreamRespParam& resp)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(resp);
    endWriteParams();
    completed();
}

IceAsync::Datang::AMD_Operation_ptzControl::AMD_Operation_ptzControl(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Datang::AMD_Operation_ptzControl::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::Datang::AMD_Operation_getDeviceInfo::AMD_Operation_getDeviceInfo(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Datang::AMD_Operation_getDeviceInfo::ice_response(const ::Datang::DeviceInfo& info)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(info);
    endWriteParams();
    completed();
}
::IceProxy::Ice::Object* ::IceProxy::Datang::upCast(::IceProxy::Datang::Operation* p) { return p; }

void
::IceProxy::Datang::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::Datang::Operation>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Datang::Operation;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::_iceI_begin_requsetCatalog(const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Datang_Operation_requsetCatalog_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Datang_Operation_requsetCatalog_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Datang_Operation_requsetCatalog_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Datang_Operation_requsetCatalog_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Datang::Operation::end_requsetCatalog(::Datang::CatalogList& iceP_catalogs, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Datang_Operation_requsetCatalog_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_catalogs);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::_iceI_begin_openRealStream(const ::Datang::RealStreamReqParam& iceP_req, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Datang_Operation_openRealStream_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Datang_Operation_openRealStream_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Datang_Operation_openRealStream_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_req);
        result->endWriteParams();
        result->invoke(iceC_Datang_Operation_openRealStream_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Datang::Operation::end_openRealStream(::Datang::RealStreamRespParam& iceP_resp, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Datang_Operation_openRealStream_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_resp);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::_iceI_begin_ptzControl(const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Datang_Operation_ptzControl_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Datang_Operation_ptzControl_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Datang_Operation_ptzControl_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        ostr->write(iceP_cmd);
        result->endWriteParams();
        result->invoke(iceC_Datang_Operation_ptzControl_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Datang::Operation::end_ptzControl(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Datang_Operation_ptzControl_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::_iceI_begin_getDeviceInfo(::Ice::Int iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Datang_Operation_getDeviceInfo_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Datang_Operation_getDeviceInfo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Datang_Operation_getDeviceInfo_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Datang_Operation_getDeviceInfo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Datang::Operation::end_getDeviceInfo(::Datang::DeviceInfo& iceP_info, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Datang_Operation_getDeviceInfo_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Datang::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_info);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::_iceI_begin_login(const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Datang_Operation_login_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Datang_Operation_login_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Datang_Operation_login_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        ostr->write(iceP_password);
        result->endWriteParams();
        result->invoke(iceC_Datang_Operation_login_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Datang::Operation::end_login(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Datang_Operation_login_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Datang::Operation::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Datang_Operation_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Datang_Operation_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Datang_Operation_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Datang::Operation::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Datang_Operation_shutdown_name);
}

::IceProxy::Ice::Object*
IceProxy::Datang::Operation::_newInstance() const
{
    return new Operation;
}

const ::std::string&
IceProxy::Datang::Operation::ice_staticId()
{
    return ::Datang::Operation::ice_staticId();
}

Datang::Operation::~Operation()
{
}

::Ice::Object* Datang::upCast(::Datang::Operation* p) { return p; }


namespace
{
const ::std::string iceC_Datang_Operation_ids[2] =
{
    "::Datang::Operation",
    "::Ice::Object"
};

}

bool
Datang::Operation::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Datang_Operation_ids, iceC_Datang_Operation_ids + 2, s);
}

::std::vector< ::std::string>
Datang::Operation::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Datang_Operation_ids[0], &iceC_Datang_Operation_ids[2]);
}

const ::std::string&
Datang::Operation::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Datang::Operation::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Datang::Operation";
    return typeId;
#else
    return iceC_Datang_Operation_ids[0];
#endif
}

bool
Datang::Operation::_iceD_requsetCatalog(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->requsetCatalog_async(new IceAsync::Datang::AMD_Operation_requsetCatalog(inS), iceP_id, current);
    return false;
}

bool
Datang::Operation::_iceD_openRealStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Datang::RealStreamReqParam iceP_req;
    istr->read(iceP_req);
    inS.endReadParams();
    this->openRealStream_async(new IceAsync::Datang::AMD_Operation_openRealStream(inS), iceP_req, current);
    return false;
}

bool
Datang::Operation::_iceD_ptzControl(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    ::std::string iceP_cmd;
    istr->read(iceP_id);
    istr->read(iceP_cmd);
    inS.endReadParams();
    this->ptzControl_async(new IceAsync::Datang::AMD_Operation_ptzControl(inS), iceP_id, iceP_cmd, current);
    return false;
}

bool
Datang::Operation::_iceD_getDeviceInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->getDeviceInfo_async(new IceAsync::Datang::AMD_Operation_getDeviceInfo(inS), iceP_id, current);
    return false;
}

bool
Datang::Operation::_iceD_login(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_user;
    ::std::string iceP_password;
    istr->read(iceP_user);
    istr->read(iceP_password);
    inS.endReadParams();
    bool ret = this->login(iceP_user, iceP_password, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
Datang::Operation::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}

namespace
{
const ::std::string iceC_Datang_Operation_all[] =
{
    "getDeviceInfo",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "login",
    "openRealStream",
    "ptzControl",
    "requsetCatalog",
    "shutdown"
};

}

bool
Datang::Operation::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Datang_Operation_all, iceC_Datang_Operation_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Datang_Operation_all)
    {
        case 0:
        {
            return _iceD_getDeviceInfo(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_login(in, current);
        }
        case 6:
        {
            return _iceD_openRealStream(in, current);
        }
        case 7:
        {
            return _iceD_ptzControl(in, current);
        }
        case 8:
        {
            return _iceD_requsetCatalog(in, current);
        }
        case 9:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
Datang::Operation::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::Datang::Operation, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Datang::Operation::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Datang::Operation, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
Datang::_icePatchObjectPtr(OperationPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Datang::OperationPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Datang::Operation::ice_staticId(), v);
    }
}

namespace Ice
{
}

#endif
