// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Gateway.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Gateway.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Media::RequestCanceledException> iceC_Media_RequestCanceledException_init("::Media::RequestCanceledException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Media::OpenStreamException> iceC_Media_OpenStreamException_init("::Media::OpenStreamException");

const ::std::string iceC_Media_Stream_ids[2] =
{
    "::Ice::Object",
    "::Media::Stream"
};
const ::std::string iceC_Media_Stream_ops[] =
{
    "closeStream",
    "closeVodStream",
    "controlVodStream",
    "getRecordFiles",
    "getStreamStatic",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "openRealStream",
    "openVodStream"
};
const ::std::string iceC_Media_Stream_openRealStream_name = "openRealStream";
const ::std::string iceC_Media_Stream_closeStream_name = "closeStream";
const ::std::string iceC_Media_Stream_getStreamStatic_name = "getStreamStatic";
const ::std::string iceC_Media_Stream_getRecordFiles_name = "getRecordFiles";
const ::std::string iceC_Media_Stream_openVodStream_name = "openVodStream";
const ::std::string iceC_Media_Stream_closeVodStream_name = "closeVodStream";
const ::std::string iceC_Media_Stream_controlVodStream_name = "controlVodStream";

const ::IceInternal::DefaultUserExceptionFactoryInit<::Gateway::RequestCanceledException> iceC_Gateway_RequestCanceledException_init("::Gateway::RequestCanceledException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Gateway::DeviceControlException> iceC_Gateway_DeviceControlException_init("::Gateway::DeviceControlException");

const ::std::string iceC_Gateway_DeviceControl_ids[2] =
{
    "::Gateway::DeviceControl",
    "::Ice::Object"
};
const ::std::string iceC_Gateway_DeviceControl_ops[] =
{
    "Timing",
    "getDeviceInfo",
    "getDeviceStatus",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "login",
    "ptzControl",
    "reboot",
    "resetGuard",
    "setGuard",
    "shutdown",
    "subscribe"
};
const ::std::string iceC_Gateway_DeviceControl_ptzControl_name = "ptzControl";
const ::std::string iceC_Gateway_DeviceControl_getDeviceInfo_name = "getDeviceInfo";
const ::std::string iceC_Gateway_DeviceControl_getDeviceStatus_name = "getDeviceStatus";
const ::std::string iceC_Gateway_DeviceControl_login_name = "login";
const ::std::string iceC_Gateway_DeviceControl_shutdown_name = "shutdown";
const ::std::string iceC_Gateway_DeviceControl_Timing_name = "Timing";
const ::std::string iceC_Gateway_DeviceControl_setGuard_name = "setGuard";
const ::std::string iceC_Gateway_DeviceControl_resetGuard_name = "resetGuard";
const ::std::string iceC_Gateway_DeviceControl_subscribe_name = "subscribe";
const ::std::string iceC_Gateway_DeviceControl_reboot_name = "reboot";

}

Media::RequestCanceledException::~RequestCanceledException()
{
}

const ::std::string&
Media::RequestCanceledException::ice_staticId()
{
    static const ::std::string typeId = "::Media::RequestCanceledException";
    return typeId;
}

Media::OpenStreamException::~OpenStreamException()
{
}

const ::std::string&
Media::OpenStreamException::ice_staticId()
{
    static const ::std::string typeId = "::Media::OpenStreamException";
    return typeId;
}

Gateway::RequestCanceledException::~RequestCanceledException()
{
}

const ::std::string&
Gateway::RequestCanceledException::ice_staticId()
{
    static const ::std::string typeId = "::Gateway::RequestCanceledException";
    return typeId;
}

Gateway::DeviceControlException::~DeviceControlException()
{
}

const ::std::string&
Gateway::DeviceControlException::ice_staticId()
{
    static const ::std::string typeId = "::Gateway::DeviceControlException";
    return typeId;
}

bool
Media::Stream::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Media_Stream_ids, iceC_Media_Stream_ids + 2, s);
}

::std::vector<::std::string>
Media::Stream::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Media_Stream_ids[0], &iceC_Media_Stream_ids[2]);
}

::std::string
Media::Stream::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Media::Stream::ice_staticId()
{
    static const ::std::string typeId = "::Media::Stream";
    return typeId;
}

bool
Media::Stream::_iceD_openRealStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Media::RealStreamReqParam iceP_ctg;
    istr->readAll(iceP_ctg);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::Media::RealStreamRespParam& iceP_stm)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_stm);
        inA->endWriteParams();
        inA->completed();
    };
    this->openRealStreamAsync(::std::move(iceP_ctg), responseCB, inA->exception(), current);
    return false;
}

bool
Media::Stream::_iceD_closeStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_callid;
    ::std::string iceP_id;
    istr->readAll(iceP_callid, iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->closeStreamAsync(::std::move(iceP_callid), ::std::move(iceP_id), inA->response(), inA->exception(), current);
    return false;
}

bool
Media::Stream::_iceD_getStreamStatic(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    ::Media::StreamStatic iceP_static;
    this->getStreamStatic(::std::move(iceP_id), iceP_static, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_static);
    inS.endWriteParams();
    return true;
}

bool
Media::Stream::_iceD_getRecordFiles(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_startTime;
    ::std::string iceP_endtime;
    istr->readAll(iceP_startTime, iceP_endtime);
    inS.endReadParams();
    this->getRecordFiles(::std::move(iceP_startTime), ::std::move(iceP_endtime), current);
    inS.writeEmptyParams();
    return true;
}

bool
Media::Stream::_iceD_openVodStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Media::RealStreamReqParam iceP_req;
    istr->readAll(iceP_req);
    inS.endReadParams();
    ::Media::RealStreamRespParam iceP_resp;
    this->openVodStream(::std::move(iceP_req), iceP_resp, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_resp);
    inS.endWriteParams();
    return true;
}

bool
Media::Stream::_iceD_closeVodStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_callid;
    ::std::string iceP_id;
    istr->readAll(iceP_callid, iceP_id);
    inS.endReadParams();
    this->closeVodStream(::std::move(iceP_callid), ::std::move(iceP_id), current);
    inS.writeEmptyParams();
    return true;
}

bool
Media::Stream::_iceD_controlVodStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_cmd;
    ::std::string iceP_callid;
    ::std::string iceP_id;
    istr->readAll(iceP_cmd, iceP_callid, iceP_id);
    inS.endReadParams();
    this->controlVodStream(::std::move(iceP_cmd), ::std::move(iceP_callid), ::std::move(iceP_id), current);
    inS.writeEmptyParams();
    return true;
}

bool
Media::Stream::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Media_Stream_ops, iceC_Media_Stream_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Media_Stream_ops)
    {
        case 0:
        {
            return _iceD_closeStream(in, current);
        }
        case 1:
        {
            return _iceD_closeVodStream(in, current);
        }
        case 2:
        {
            return _iceD_controlVodStream(in, current);
        }
        case 3:
        {
            return _iceD_getRecordFiles(in, current);
        }
        case 4:
        {
            return _iceD_getStreamStatic(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        case 9:
        {
            return _iceD_openRealStream(in, current);
        }
        case 10:
        {
            return _iceD_openVodStream(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

bool
Gateway::DeviceControl::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Gateway_DeviceControl_ids, iceC_Gateway_DeviceControl_ids + 2, s);
}

::std::vector<::std::string>
Gateway::DeviceControl::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Gateway_DeviceControl_ids[0], &iceC_Gateway_DeviceControl_ids[2]);
}

::std::string
Gateway::DeviceControl::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Gateway::DeviceControl::ice_staticId()
{
    static const ::std::string typeId = "::Gateway::DeviceControl";
    return typeId;
}

bool
Gateway::DeviceControl::_iceD_ptzControl(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    ::std::string iceP_cmd;
    istr->readAll(iceP_id, iceP_cmd);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->ptzControlAsync(::std::move(iceP_id), ::std::move(iceP_cmd), inA->response(), inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_getDeviceInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::Gateway::DeviceInfo& iceP_info)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_info);
        inA->endWriteParams();
        inA->completed();
    };
    this->getDeviceInfoAsync(::std::move(iceP_id), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_getDeviceStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::Gateway::DeviceStatus& iceP_status)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_status);
        inA->endWriteParams();
        inA->completed();
    };
    this->getDeviceStatusAsync(::std::move(iceP_id), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_login(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_user;
    ::std::string iceP_password;
    istr->readAll(iceP_user, iceP_password);
    inS.endReadParams();
    bool ret = this->login(::std::move(iceP_user), ::std::move(iceP_password), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_Timing(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_time;
    istr->readAll(iceP_time);
    inS.endReadParams();
    this->Timing(::std::move(iceP_time), current);
    inS.writeEmptyParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_setGuard(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    this->setGuard(::std::move(iceP_id), current);
    inS.writeEmptyParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_resetGuard(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    this->resetGuard(::std::move(iceP_id), current);
    inS.writeEmptyParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_subscribe(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    this->subscribe(::std::move(iceP_id), current);
    inS.writeEmptyParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_reboot(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    this->reboot(::std::move(iceP_id), current);
    inS.writeEmptyParams();
    return true;
}

bool
Gateway::DeviceControl::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Gateway_DeviceControl_ops, iceC_Gateway_DeviceControl_ops + 14, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Gateway_DeviceControl_ops)
    {
        case 0:
        {
            return _iceD_Timing(in, current);
        }
        case 1:
        {
            return _iceD_getDeviceInfo(in, current);
        }
        case 2:
        {
            return _iceD_getDeviceStatus(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_login(in, current);
        }
        case 8:
        {
            return _iceD_ptzControl(in, current);
        }
        case 9:
        {
            return _iceD_reboot(in, current);
        }
        case 10:
        {
            return _iceD_resetGuard(in, current);
        }
        case 11:
        {
            return _iceD_setGuard(in, current);
        }
        case 12:
        {
            return _iceD_shutdown(in, current);
        }
        case 13:
        {
            return _iceD_subscribe(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
Media::StreamPrx::_iceI_openRealStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Media::RealStreamRespParam>>& outAsync, const ::Media::RealStreamReqParam& iceP_ctg, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Media_Stream_openRealStream_name);
    outAsync->invoke(iceC_Media_Stream_openRealStream_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_ctg);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Media::OpenStreamException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Media::StreamPrx::_iceI_closeStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_callid, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Media_Stream_closeStream_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_callid, iceP_id);
        },
        nullptr);
}

void
Media::StreamPrx::_iceI_getStreamStatic(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Media::StreamStatic>>& outAsync, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Media_Stream_getStreamStatic_name);
    outAsync->invoke(iceC_Media_Stream_getStreamStatic_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        nullptr);
}

void
Media::StreamPrx::_iceI_getRecordFiles(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_startTime, const ::std::string& iceP_endtime, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Media_Stream_getRecordFiles_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_startTime, iceP_endtime);
        },
        nullptr);
}

void
Media::StreamPrx::_iceI_openVodStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Media::RealStreamRespParam>>& outAsync, const ::Media::RealStreamReqParam& iceP_req, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Media_Stream_openVodStream_name);
    outAsync->invoke(iceC_Media_Stream_openVodStream_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_req);
        },
        nullptr);
}

void
Media::StreamPrx::_iceI_closeVodStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_callid, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Media_Stream_closeVodStream_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_callid, iceP_id);
        },
        nullptr);
}

void
Media::StreamPrx::_iceI_controlVodStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_cmd, const ::std::string& iceP_callid, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Media_Stream_controlVodStream_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_cmd, iceP_callid, iceP_id);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
Media::StreamPrx::_newInstance() const
{
    return ::IceInternal::createProxy<StreamPrx>();
}

const ::std::string&
Media::StreamPrx::ice_staticId()
{
    return Media::Stream::ice_staticId();
}

void
Gateway::DeviceControlPrx::_iceI_ptzControl(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_ptzControl_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_ptzControl_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id, iceP_cmd);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Gateway::DeviceControlException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Gateway::DeviceControlPrx::_iceI_getDeviceInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceInfo>>& outAsync, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_getDeviceInfo_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_getDeviceInfo_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Gateway::DeviceControlException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Gateway::DeviceControlPrx::_iceI_getDeviceStatus(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceStatus>>& outAsync, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_getDeviceStatus_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_getDeviceStatus_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Gateway::DeviceControlException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Gateway::DeviceControlPrx::_iceI_login(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_login_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_login_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user, iceP_password);
        },
        nullptr);
}

void
Gateway::DeviceControlPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Gateway_DeviceControl_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
Gateway::DeviceControlPrx::_iceI_Timing(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_time, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Gateway_DeviceControl_Timing_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_time);
        },
        nullptr);
}

void
Gateway::DeviceControlPrx::_iceI_setGuard(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Gateway_DeviceControl_setGuard_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        nullptr);
}

void
Gateway::DeviceControlPrx::_iceI_resetGuard(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Gateway_DeviceControl_resetGuard_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        nullptr);
}

void
Gateway::DeviceControlPrx::_iceI_subscribe(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Gateway_DeviceControl_subscribe_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        nullptr);
}

void
Gateway::DeviceControlPrx::_iceI_reboot(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Gateway_DeviceControl_reboot_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
Gateway::DeviceControlPrx::_newInstance() const
{
    return ::IceInternal::createProxy<DeviceControlPrx>();
}

const ::std::string&
Gateway::DeviceControlPrx::ice_staticId()
{
    return Gateway::DeviceControl::ice_staticId();
}

namespace Ice
{
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Media_Stream_openRealStream_name = "openRealStream";

const ::std::string iceC_Media_Stream_closeStream_name = "closeStream";

const ::std::string iceC_Media_Stream_getStreamStatic_name = "getStreamStatic";

const ::std::string iceC_Media_Stream_getRecordFiles_name = "getRecordFiles";

const ::std::string iceC_Media_Stream_openVodStream_name = "openVodStream";

const ::std::string iceC_Media_Stream_closeVodStream_name = "closeVodStream";

const ::std::string iceC_Media_Stream_controlVodStream_name = "controlVodStream";

}

namespace
{

const ::std::string iceC_Gateway_DeviceControl_ptzControl_name = "ptzControl";

const ::std::string iceC_Gateway_DeviceControl_getDeviceInfo_name = "getDeviceInfo";

const ::std::string iceC_Gateway_DeviceControl_getDeviceStatus_name = "getDeviceStatus";

const ::std::string iceC_Gateway_DeviceControl_login_name = "login";

const ::std::string iceC_Gateway_DeviceControl_shutdown_name = "shutdown";

const ::std::string iceC_Gateway_DeviceControl_Timing_name = "Timing";

const ::std::string iceC_Gateway_DeviceControl_setGuard_name = "setGuard";

const ::std::string iceC_Gateway_DeviceControl_resetGuard_name = "resetGuard";

const ::std::string iceC_Gateway_DeviceControl_subscribe_name = "subscribe";

const ::std::string iceC_Gateway_DeviceControl_reboot_name = "reboot";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Media::RequestCanceledException> iceC_Media_RequestCanceledException_init("::Media::RequestCanceledException");

}

Media::RequestCanceledException::~RequestCanceledException() throw()
{
}

::std::string
Media::RequestCanceledException::ice_id() const
{
    return "::Media::RequestCanceledException";
}

Media::RequestCanceledException*
Media::RequestCanceledException::ice_clone() const
{
    return new RequestCanceledException(*this);
}

void
Media::RequestCanceledException::ice_throw() const
{
    throw *this;
}

void
Media::RequestCanceledException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Media::RequestCanceledException", -1, true);
    Ice::StreamWriter< ::Media::RequestCanceledException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Media::RequestCanceledException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Media::RequestCanceledException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Media::OpenStreamException> iceC_Media_OpenStreamException_init("::Media::OpenStreamException");

}

Media::OpenStreamException::OpenStreamException(const ::std::string& iceP_callid, const ::std::string& iceP_reason) :
    ::Ice::UserException(),
    callid(iceP_callid),
    reason(iceP_reason)
{
}

Media::OpenStreamException::~OpenStreamException() throw()
{
}

::std::string
Media::OpenStreamException::ice_id() const
{
    return "::Media::OpenStreamException";
}

Media::OpenStreamException*
Media::OpenStreamException::ice_clone() const
{
    return new OpenStreamException(*this);
}

void
Media::OpenStreamException::ice_throw() const
{
    throw *this;
}

void
Media::OpenStreamException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Media::OpenStreamException", -1, true);
    Ice::StreamWriter< ::Media::OpenStreamException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Media::OpenStreamException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Media::OpenStreamException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Gateway::RequestCanceledException> iceC_Gateway_RequestCanceledException_init("::Gateway::RequestCanceledException");

}

Gateway::RequestCanceledException::~RequestCanceledException() throw()
{
}

::std::string
Gateway::RequestCanceledException::ice_id() const
{
    return "::Gateway::RequestCanceledException";
}

Gateway::RequestCanceledException*
Gateway::RequestCanceledException::ice_clone() const
{
    return new RequestCanceledException(*this);
}

void
Gateway::RequestCanceledException::ice_throw() const
{
    throw *this;
}

void
Gateway::RequestCanceledException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Gateway::RequestCanceledException", -1, true);
    Ice::StreamWriter< ::Gateway::RequestCanceledException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Gateway::RequestCanceledException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Gateway::RequestCanceledException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Gateway::DeviceControlException> iceC_Gateway_DeviceControlException_init("::Gateway::DeviceControlException");

}

Gateway::DeviceControlException::DeviceControlException(const ::std::string& iceP_reason) :
    ::Ice::UserException(),
    reason(iceP_reason)
{
}

Gateway::DeviceControlException::~DeviceControlException() throw()
{
}

::std::string
Gateway::DeviceControlException::ice_id() const
{
    return "::Gateway::DeviceControlException";
}

Gateway::DeviceControlException*
Gateway::DeviceControlException::ice_clone() const
{
    return new DeviceControlException(*this);
}

void
Gateway::DeviceControlException::ice_throw() const
{
    throw *this;
}

void
Gateway::DeviceControlException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Gateway::DeviceControlException", -1, true);
    Ice::StreamWriter< ::Gateway::DeviceControlException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Gateway::DeviceControlException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Gateway::DeviceControlException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

Media::AMD_Stream_openRealStream::~AMD_Stream_openRealStream()
{
}

Media::AMD_Stream_closeStream::~AMD_Stream_closeStream()
{
}

Gateway::AMD_DeviceControl_ptzControl::~AMD_DeviceControl_ptzControl()
{
}

Gateway::AMD_DeviceControl_getDeviceInfo::~AMD_DeviceControl_getDeviceInfo()
{
}

Gateway::AMD_DeviceControl_getDeviceStatus::~AMD_DeviceControl_getDeviceStatus()
{
}

IceAsync::Media::AMD_Stream_openRealStream::AMD_Stream_openRealStream(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Media::AMD_Stream_openRealStream::ice_response(const ::Media::RealStreamRespParam& stm)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(stm);
    endWriteParams();
    completed();
}

IceAsync::Media::AMD_Stream_closeStream::AMD_Stream_closeStream(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Media::AMD_Stream_closeStream::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_ptzControl::AMD_DeviceControl_ptzControl(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_ptzControl::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_getDeviceInfo::AMD_DeviceControl_getDeviceInfo(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_getDeviceInfo::ice_response(const ::Gateway::DeviceInfo& info)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(info);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_getDeviceStatus::AMD_DeviceControl_getDeviceStatus(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_getDeviceStatus::ice_response(const ::Gateway::DeviceStatus& status)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(status);
    endWriteParams();
    completed();
}
::IceProxy::Ice::Object* ::IceProxy::Media::upCast(::IceProxy::Media::Stream* p) { return p; }

void
::IceProxy::Media::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::Media::Stream>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Media::Stream;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::Media::Stream::_iceI_begin_openRealStream(const ::Media::RealStreamReqParam& iceP_ctg, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Media_Stream_openRealStream_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Media_Stream_openRealStream_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Media_Stream_openRealStream_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_ctg);
        result->endWriteParams();
        result->invoke(iceC_Media_Stream_openRealStream_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Media::Stream::end_openRealStream(::Media::RealStreamRespParam& iceP_stm, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Media_Stream_openRealStream_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Media::OpenStreamException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_stm);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Media::Stream::_iceI_begin_closeStream(const ::std::string& iceP_callid, const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Media_Stream_closeStream_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Media_Stream_closeStream_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_callid);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Media_Stream_closeStream_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Media::Stream::end_closeStream(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Media_Stream_closeStream_name);
}

::Ice::AsyncResultPtr
IceProxy::Media::Stream::_iceI_begin_getStreamStatic(const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Media_Stream_getStreamStatic_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Media_Stream_getStreamStatic_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Media_Stream_getStreamStatic_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Media_Stream_getStreamStatic_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Media::Stream::end_getStreamStatic(::Media::StreamStatic& iceP_static, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Media_Stream_getStreamStatic_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_static);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Media::Stream::_iceI_begin_getRecordFiles(const ::std::string& iceP_startTime, const ::std::string& iceP_endtime, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Media_Stream_getRecordFiles_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Media_Stream_getRecordFiles_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_startTime);
        ostr->write(iceP_endtime);
        result->endWriteParams();
        result->invoke(iceC_Media_Stream_getRecordFiles_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Media::Stream::end_getRecordFiles(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Media_Stream_getRecordFiles_name);
}

::Ice::AsyncResultPtr
IceProxy::Media::Stream::_iceI_begin_openVodStream(const ::Media::RealStreamReqParam& iceP_req, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Media_Stream_openVodStream_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Media_Stream_openVodStream_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Media_Stream_openVodStream_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_req);
        result->endWriteParams();
        result->invoke(iceC_Media_Stream_openVodStream_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Media::Stream::end_openVodStream(::Media::RealStreamRespParam& iceP_resp, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Media_Stream_openVodStream_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_resp);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Media::Stream::_iceI_begin_closeVodStream(const ::std::string& iceP_callid, const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Media_Stream_closeVodStream_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Media_Stream_closeVodStream_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_callid);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Media_Stream_closeVodStream_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Media::Stream::end_closeVodStream(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Media_Stream_closeVodStream_name);
}

::Ice::AsyncResultPtr
IceProxy::Media::Stream::_iceI_begin_controlVodStream(const ::std::string& iceP_cmd, const ::std::string& iceP_callid, const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Media_Stream_controlVodStream_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Media_Stream_controlVodStream_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_cmd);
        ostr->write(iceP_callid);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Media_Stream_controlVodStream_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Media::Stream::end_controlVodStream(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Media_Stream_controlVodStream_name);
}

::IceProxy::Ice::Object*
IceProxy::Media::Stream::_newInstance() const
{
    return new Stream;
}

const ::std::string&
IceProxy::Media::Stream::ice_staticId()
{
    return ::Media::Stream::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::Gateway::upCast(::IceProxy::Gateway::DeviceControl* p) { return p; }

void
::IceProxy::Gateway::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::Gateway::DeviceControl>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Gateway::DeviceControl;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_ptzControl(const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_ptzControl_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_ptzControl_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_ptzControl_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        ostr->write(iceP_cmd);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_ptzControl_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_ptzControl(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_ptzControl_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Gateway::DeviceControlException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_getDeviceInfo(const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_getDeviceInfo_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_getDeviceInfo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_getDeviceInfo_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_getDeviceInfo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_getDeviceInfo(::Gateway::DeviceInfo& iceP_info, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_getDeviceInfo_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Gateway::DeviceControlException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_info);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_getDeviceStatus(const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_getDeviceStatus_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_getDeviceStatus_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_getDeviceStatus_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_getDeviceStatus_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_getDeviceStatus(::Gateway::DeviceStatus& iceP_status, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_getDeviceStatus_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Gateway::DeviceControlException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_status);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_login(const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_login_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_login_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_login_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        ostr->write(iceP_password);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_login_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Gateway::DeviceControl::end_login(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_login_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Gateway_DeviceControl_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Gateway_DeviceControl_shutdown_name);
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_Timing(const ::std::string& iceP_time, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_Timing_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_Timing_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_time);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_Timing_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_Timing(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Gateway_DeviceControl_Timing_name);
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_setGuard(const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_setGuard_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_setGuard_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_setGuard_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_setGuard(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Gateway_DeviceControl_setGuard_name);
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_resetGuard(const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_resetGuard_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_resetGuard_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_resetGuard_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_resetGuard(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Gateway_DeviceControl_resetGuard_name);
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_subscribe(const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_subscribe_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_subscribe_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_subscribe_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_subscribe(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Gateway_DeviceControl_subscribe_name);
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_reboot(const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_reboot_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_reboot_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_reboot_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_reboot(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Gateway_DeviceControl_reboot_name);
}

::IceProxy::Ice::Object*
IceProxy::Gateway::DeviceControl::_newInstance() const
{
    return new DeviceControl;
}

const ::std::string&
IceProxy::Gateway::DeviceControl::ice_staticId()
{
    return ::Gateway::DeviceControl::ice_staticId();
}

Media::Stream::~Stream()
{
}

::Ice::Object* Media::upCast(::Media::Stream* p) { return p; }


namespace
{
const ::std::string iceC_Media_Stream_ids[2] =
{
    "::Ice::Object",
    "::Media::Stream"
};

}

bool
Media::Stream::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Media_Stream_ids, iceC_Media_Stream_ids + 2, s);
}

::std::vector< ::std::string>
Media::Stream::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Media_Stream_ids[0], &iceC_Media_Stream_ids[2]);
}

const ::std::string&
Media::Stream::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Media::Stream::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Media::Stream";
    return typeId;
#else
    return iceC_Media_Stream_ids[1];
#endif
}

bool
Media::Stream::_iceD_openRealStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Media::RealStreamReqParam iceP_ctg;
    istr->read(iceP_ctg);
    inS.endReadParams();
    this->openRealStream_async(new IceAsync::Media::AMD_Stream_openRealStream(inS), iceP_ctg, current);
    return false;
}

bool
Media::Stream::_iceD_closeStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_callid;
    ::std::string iceP_id;
    istr->read(iceP_callid);
    istr->read(iceP_id);
    inS.endReadParams();
    this->closeStream_async(new IceAsync::Media::AMD_Stream_closeStream(inS), iceP_callid, iceP_id, current);
    return false;
}

bool
Media::Stream::_iceD_getStreamStatic(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    ::Media::StreamStatic iceP_static;
    this->getStreamStatic(iceP_id, iceP_static, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_static);
    inS.endWriteParams();
    return true;
}

bool
Media::Stream::_iceD_getRecordFiles(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_startTime;
    ::std::string iceP_endtime;
    istr->read(iceP_startTime);
    istr->read(iceP_endtime);
    inS.endReadParams();
    this->getRecordFiles(iceP_startTime, iceP_endtime, current);
    inS.writeEmptyParams();
    return true;
}

bool
Media::Stream::_iceD_openVodStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Media::RealStreamReqParam iceP_req;
    istr->read(iceP_req);
    inS.endReadParams();
    ::Media::RealStreamRespParam iceP_resp;
    this->openVodStream(iceP_req, iceP_resp, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_resp);
    inS.endWriteParams();
    return true;
}

bool
Media::Stream::_iceD_closeVodStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_callid;
    ::std::string iceP_id;
    istr->read(iceP_callid);
    istr->read(iceP_id);
    inS.endReadParams();
    this->closeVodStream(iceP_callid, iceP_id, current);
    inS.writeEmptyParams();
    return true;
}

bool
Media::Stream::_iceD_controlVodStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_cmd;
    ::std::string iceP_callid;
    ::std::string iceP_id;
    istr->read(iceP_cmd);
    istr->read(iceP_callid);
    istr->read(iceP_id);
    inS.endReadParams();
    this->controlVodStream(iceP_cmd, iceP_callid, iceP_id, current);
    inS.writeEmptyParams();
    return true;
}

namespace
{
const ::std::string iceC_Media_Stream_all[] =
{
    "closeStream",
    "closeVodStream",
    "controlVodStream",
    "getRecordFiles",
    "getStreamStatic",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "openRealStream",
    "openVodStream"
};

}

bool
Media::Stream::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Media_Stream_all, iceC_Media_Stream_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Media_Stream_all)
    {
        case 0:
        {
            return _iceD_closeStream(in, current);
        }
        case 1:
        {
            return _iceD_closeVodStream(in, current);
        }
        case 2:
        {
            return _iceD_controlVodStream(in, current);
        }
        case 3:
        {
            return _iceD_getRecordFiles(in, current);
        }
        case 4:
        {
            return _iceD_getStreamStatic(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        case 9:
        {
            return _iceD_openRealStream(in, current);
        }
        case 10:
        {
            return _iceD_openVodStream(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
Media::Stream::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::Media::Stream, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Media::Stream::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Media::Stream, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
Media::_icePatchObjectPtr(StreamPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Media::StreamPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Media::Stream::ice_staticId(), v);
    }
}

Gateway::DeviceControl::~DeviceControl()
{
}

::Ice::Object* Gateway::upCast(::Gateway::DeviceControl* p) { return p; }


namespace
{
const ::std::string iceC_Gateway_DeviceControl_ids[2] =
{
    "::Gateway::DeviceControl",
    "::Ice::Object"
};

}

bool
Gateway::DeviceControl::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Gateway_DeviceControl_ids, iceC_Gateway_DeviceControl_ids + 2, s);
}

::std::vector< ::std::string>
Gateway::DeviceControl::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Gateway_DeviceControl_ids[0], &iceC_Gateway_DeviceControl_ids[2]);
}

const ::std::string&
Gateway::DeviceControl::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Gateway::DeviceControl::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Gateway::DeviceControl";
    return typeId;
#else
    return iceC_Gateway_DeviceControl_ids[0];
#endif
}

bool
Gateway::DeviceControl::_iceD_ptzControl(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    ::std::string iceP_cmd;
    istr->read(iceP_id);
    istr->read(iceP_cmd);
    inS.endReadParams();
    this->ptzControl_async(new IceAsync::Gateway::AMD_DeviceControl_ptzControl(inS), iceP_id, iceP_cmd, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_getDeviceInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->getDeviceInfo_async(new IceAsync::Gateway::AMD_DeviceControl_getDeviceInfo(inS), iceP_id, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_getDeviceStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->getDeviceStatus_async(new IceAsync::Gateway::AMD_DeviceControl_getDeviceStatus(inS), iceP_id, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_login(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_user;
    ::std::string iceP_password;
    istr->read(iceP_user);
    istr->read(iceP_password);
    inS.endReadParams();
    bool ret = this->login(iceP_user, iceP_password, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_Timing(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_time;
    istr->read(iceP_time);
    inS.endReadParams();
    this->Timing(iceP_time, current);
    inS.writeEmptyParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_setGuard(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->setGuard(iceP_id, current);
    inS.writeEmptyParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_resetGuard(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->resetGuard(iceP_id, current);
    inS.writeEmptyParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_subscribe(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->subscribe(iceP_id, current);
    inS.writeEmptyParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_reboot(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->reboot(iceP_id, current);
    inS.writeEmptyParams();
    return true;
}

namespace
{
const ::std::string iceC_Gateway_DeviceControl_all[] =
{
    "Timing",
    "getDeviceInfo",
    "getDeviceStatus",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "login",
    "ptzControl",
    "reboot",
    "resetGuard",
    "setGuard",
    "shutdown",
    "subscribe"
};

}

bool
Gateway::DeviceControl::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Gateway_DeviceControl_all, iceC_Gateway_DeviceControl_all + 14, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Gateway_DeviceControl_all)
    {
        case 0:
        {
            return _iceD_Timing(in, current);
        }
        case 1:
        {
            return _iceD_getDeviceInfo(in, current);
        }
        case 2:
        {
            return _iceD_getDeviceStatus(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_login(in, current);
        }
        case 8:
        {
            return _iceD_ptzControl(in, current);
        }
        case 9:
        {
            return _iceD_reboot(in, current);
        }
        case 10:
        {
            return _iceD_resetGuard(in, current);
        }
        case 11:
        {
            return _iceD_setGuard(in, current);
        }
        case 12:
        {
            return _iceD_shutdown(in, current);
        }
        case 13:
        {
            return _iceD_subscribe(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
Gateway::DeviceControl::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::Gateway::DeviceControl, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Gateway::DeviceControl::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Gateway::DeviceControl, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
Gateway::_icePatchObjectPtr(DeviceControlPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Gateway::DeviceControlPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Gateway::DeviceControl::ice_staticId(), v);
    }
}

namespace Ice
{
}

namespace Ice
{
}

#endif
