// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Gateway.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Gateway.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Gateway::RequestCanceledException> iceC_Gateway_RequestCanceledException_init("::Gateway::RequestCanceledException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Gateway::OpenStreamException> iceC_Gateway_OpenStreamException_init("::Gateway::OpenStreamException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Gateway::DeviceControlException> iceC_Gateway_DeviceControlException_init("::Gateway::DeviceControlException");

const ::std::string iceC_Gateway_DeviceControl_ids[2] =
{
    "::Gateway::DeviceControl",
    "::Ice::Object"
};
const ::std::string iceC_Gateway_DeviceControl_ops[] =
{
    "CalibrationTimeReq",
    "CallSipUserReq",
    "CloseAlarmReq",
    "DataPlayStopOrStartReq",
    "DeviceRefreshReq",
    "DeviceShareNotify",
    "FindRecordingFileReq",
    "GatewayRerootReq",
    "HolderOperReq",
    "LoadRecordingFile",
    "MsgQueryDeviceIpcInfoReq",
    "MsgQueryDeviceIpcStatusReq",
    "MsgStartPropertyServerReq",
    "MsgStartVioceReq",
    "MsgStopPropertyServerReq",
    "MsgStopVioceReq",
    "RebootReq",
    "RecordingFileReq",
    "RecordingOperReq",
    "RemoteControlReq",
    "RestorConfigReq",
    "SetupAlarmReq",
    "StartVoideRecoingFile",
    "StopRecordingOperReq",
    "beatHeart",
    "closeStream",
    "getDeviceInfo",
    "getDeviceStatus",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "login",
    "openRealStream",
    "ptzControl",
    "shutdown"
};
const ::std::string iceC_Gateway_DeviceControl_openRealStream_name = "openRealStream";
const ::std::string iceC_Gateway_DeviceControl_closeStream_name = "closeStream";
const ::std::string iceC_Gateway_DeviceControl_ptzControl_name = "ptzControl";
const ::std::string iceC_Gateway_DeviceControl_getDeviceInfo_name = "getDeviceInfo";
const ::std::string iceC_Gateway_DeviceControl_getDeviceStatus_name = "getDeviceStatus";
const ::std::string iceC_Gateway_DeviceControl_login_name = "login";
const ::std::string iceC_Gateway_DeviceControl_shutdown_name = "shutdown";
const ::std::string iceC_Gateway_DeviceControl_beatHeart_name = "beatHeart";
const ::std::string iceC_Gateway_DeviceControl_CallSipUserReq_name = "CallSipUserReq";
const ::std::string iceC_Gateway_DeviceControl_CalibrationTimeReq_name = "CalibrationTimeReq";
const ::std::string iceC_Gateway_DeviceControl_HolderOperReq_name = "HolderOperReq";
const ::std::string iceC_Gateway_DeviceControl_RecordingOperReq_name = "RecordingOperReq";
const ::std::string iceC_Gateway_DeviceControl_StopRecordingOperReq_name = "StopRecordingOperReq";
const ::std::string iceC_Gateway_DeviceControl_StartVoideRecoingFile_name = "StartVoideRecoingFile";
const ::std::string iceC_Gateway_DeviceControl_RecordingFileReq_name = "RecordingFileReq";
const ::std::string iceC_Gateway_DeviceControl_LoadRecordingFile_name = "LoadRecordingFile";
const ::std::string iceC_Gateway_DeviceControl_FindRecordingFileReq_name = "FindRecordingFileReq";
const ::std::string iceC_Gateway_DeviceControl_DataPlayStopOrStartReq_name = "DataPlayStopOrStartReq";
const ::std::string iceC_Gateway_DeviceControl_SetupAlarmReq_name = "SetupAlarmReq";
const ::std::string iceC_Gateway_DeviceControl_CloseAlarmReq_name = "CloseAlarmReq";
const ::std::string iceC_Gateway_DeviceControl_RestorConfigReq_name = "RestorConfigReq";
const ::std::string iceC_Gateway_DeviceControl_RebootReq_name = "RebootReq";
const ::std::string iceC_Gateway_DeviceControl_RemoteControlReq_name = "RemoteControlReq";
const ::std::string iceC_Gateway_DeviceControl_MsgStartVioceReq_name = "MsgStartVioceReq";
const ::std::string iceC_Gateway_DeviceControl_MsgStopVioceReq_name = "MsgStopVioceReq";
const ::std::string iceC_Gateway_DeviceControl_MsgQueryDeviceIpcStatusReq_name = "MsgQueryDeviceIpcStatusReq";
const ::std::string iceC_Gateway_DeviceControl_MsgQueryDeviceIpcInfoReq_name = "MsgQueryDeviceIpcInfoReq";
const ::std::string iceC_Gateway_DeviceControl_MsgStartPropertyServerReq_name = "MsgStartPropertyServerReq";
const ::std::string iceC_Gateway_DeviceControl_MsgStopPropertyServerReq_name = "MsgStopPropertyServerReq";
const ::std::string iceC_Gateway_DeviceControl_DeviceRefreshReq_name = "DeviceRefreshReq";
const ::std::string iceC_Gateway_DeviceControl_DeviceShareNotify_name = "DeviceShareNotify";
const ::std::string iceC_Gateway_DeviceControl_GatewayRerootReq_name = "GatewayRerootReq";

}

Gateway::RequestCanceledException::~RequestCanceledException()
{
}

const ::std::string&
Gateway::RequestCanceledException::ice_staticId()
{
    static const ::std::string typeId = "::Gateway::RequestCanceledException";
    return typeId;
}

Gateway::OpenStreamException::~OpenStreamException()
{
}

const ::std::string&
Gateway::OpenStreamException::ice_staticId()
{
    static const ::std::string typeId = "::Gateway::OpenStreamException";
    return typeId;
}

Gateway::DeviceControlException::~DeviceControlException()
{
}

const ::std::string&
Gateway::DeviceControlException::ice_staticId()
{
    static const ::std::string typeId = "::Gateway::DeviceControlException";
    return typeId;
}

bool
Gateway::DeviceControl::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Gateway_DeviceControl_ids, iceC_Gateway_DeviceControl_ids + 2, s);
}

::std::vector<::std::string>
Gateway::DeviceControl::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Gateway_DeviceControl_ids[0], &iceC_Gateway_DeviceControl_ids[2]);
}

::std::string
Gateway::DeviceControl::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Gateway::DeviceControl::ice_staticId()
{
    static const ::std::string typeId = "::Gateway::DeviceControl";
    return typeId;
}

bool
Gateway::DeviceControl::_iceD_openRealStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Gateway::RealStreamReqParam iceP_req;
    istr->readAll(iceP_req);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::Gateway::RealStreamRespParam& iceP_resp)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_resp);
        inA->endWriteParams();
        inA->completed();
    };
    this->openRealStreamAsync(::std::move(iceP_req), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_closeStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_callid;
    ::std::string iceP_id;
    istr->readAll(iceP_callid, iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->closeStreamAsync(::std::move(iceP_callid), ::std::move(iceP_id), inA->response(), inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_ptzControl(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    ::std::string iceP_cmd;
    istr->readAll(iceP_id, iceP_cmd);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->ptzControlAsync(::std::move(iceP_id), ::std::move(iceP_cmd), inA->response(), inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_getDeviceInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::Gateway::DeviceInfo& iceP_info)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_info);
        inA->endWriteParams();
        inA->completed();
    };
    this->getDeviceInfoAsync(::std::move(iceP_id), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_getDeviceStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::Gateway::DeviceStatus& iceP_status)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_status);
        inA->endWriteParams();
        inA->completed();
    };
    this->getDeviceStatusAsync(::std::move(iceP_id), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_login(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_user;
    ::std::string iceP_password;
    istr->readAll(iceP_user, iceP_password);
    inS.endReadParams();
    bool ret = this->login(::std::move(iceP_user), ::std::move(iceP_password), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_beatHeart(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_info;
    istr->readAll(iceP_info);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ::std::string& iceP_rinfo)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_rinfo);
        inA->endWriteParams();
        inA->completed();
    };
    this->beatHeartAsync(::std::move(iceP_info), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_CallSipUserReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    int iceP_iType;
    ::std::string iceP_pSzIp;
    int iceP_iport;
    istr->readAll(iceP_pSzSipData, iceP_iType, iceP_pSzIp, iceP_iport);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->CallSipUserReqAsync(::std::move(iceP_pSzSipData), iceP_iType, ::std::move(iceP_pSzIp), iceP_iport, responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_CalibrationTimeReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->CalibrationTimeReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_HolderOperReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    ::std::string iceP_pSzTypeOper;
    istr->readAll(iceP_pSzSipData, iceP_pSzTypeOper);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->HolderOperReqAsync(::std::move(iceP_pSzSipData), ::std::move(iceP_pSzTypeOper), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_RecordingOperReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->RecordingOperReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_StopRecordingOperReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->StopRecordingOperReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_StartVoideRecoingFile(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzIp;
    int iceP_iport;
    istr->readAll(iceP_pSzIp, iceP_iport);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->StartVoideRecoingFileAsync(::std::move(iceP_pSzIp), iceP_iport, responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_RecordingFileReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    ::std::string iceP_pSzStartTime;
    ::std::string iceP_pSzEndTime;
    int iceP_iType;
    istr->readAll(iceP_pSzSipData, iceP_pSzStartTime, iceP_pSzEndTime, iceP_iType);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->RecordingFileReqAsync(::std::move(iceP_pSzSipData), ::std::move(iceP_pSzStartTime), ::std::move(iceP_pSzEndTime), iceP_iType, responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_LoadRecordingFile(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipIdVal;
    ::std::string iceP_pSzStarTime;
    ::std::string iceP_pSzEndTime;
    int iceP_sbType;
    ::std::string iceP_pSzFilePath;
    istr->readAll(iceP_pSzSipIdVal, iceP_pSzStarTime, iceP_pSzEndTime, iceP_sbType, iceP_pSzFilePath);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->LoadRecordingFileAsync(::std::move(iceP_pSzSipIdVal), ::std::move(iceP_pSzStarTime), ::std::move(iceP_pSzEndTime), iceP_sbType, ::std::move(iceP_pSzFilePath), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_FindRecordingFileReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    ::std::string iceP_pSzStartTime;
    ::std::string iceP_pSzEndTime;
    istr->readAll(iceP_pSzSipData, iceP_pSzStartTime, iceP_pSzEndTime);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->FindRecordingFileReqAsync(::std::move(iceP_pSzSipData), ::std::move(iceP_pSzStartTime), ::std::move(iceP_pSzEndTime), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_DataPlayStopOrStartReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->DataPlayStopOrStartReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_SetupAlarmReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->SetupAlarmReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_CloseAlarmReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->CloseAlarmReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_RestorConfigReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->RestorConfigReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_RebootReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->RebootReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_RemoteControlReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->RemoteControlReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_MsgStartVioceReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->MsgStartVioceReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_MsgStopVioceReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->MsgStopVioceReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_MsgQueryDeviceIpcStatusReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->MsgQueryDeviceIpcStatusReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_MsgQueryDeviceIpcInfoReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->MsgQueryDeviceIpcInfoReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_MsgStartPropertyServerReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->MsgStartPropertyServerReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_MsgStopPropertyServerReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->MsgStopPropertyServerReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_DeviceRefreshReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->DeviceRefreshReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_DeviceShareNotify(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->DeviceShareNotifyAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_GatewayRerootReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->readAll(iceP_pSzSipData);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int iceP_iResMsglen, const ::std::string& iceP_sResMsgbuf)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(iceP_iResMsglen, iceP_sResMsgbuf);
        inA->endWriteParams();
        inA->completed();
    };
    this->GatewayRerootReqAsync(::std::move(iceP_pSzSipData), responseCB, inA->exception(), current);
    return false;
}

bool
Gateway::DeviceControl::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Gateway_DeviceControl_ops, iceC_Gateway_DeviceControl_ops + 36, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Gateway_DeviceControl_ops)
    {
        case 0:
        {
            return _iceD_CalibrationTimeReq(in, current);
        }
        case 1:
        {
            return _iceD_CallSipUserReq(in, current);
        }
        case 2:
        {
            return _iceD_CloseAlarmReq(in, current);
        }
        case 3:
        {
            return _iceD_DataPlayStopOrStartReq(in, current);
        }
        case 4:
        {
            return _iceD_DeviceRefreshReq(in, current);
        }
        case 5:
        {
            return _iceD_DeviceShareNotify(in, current);
        }
        case 6:
        {
            return _iceD_FindRecordingFileReq(in, current);
        }
        case 7:
        {
            return _iceD_GatewayRerootReq(in, current);
        }
        case 8:
        {
            return _iceD_HolderOperReq(in, current);
        }
        case 9:
        {
            return _iceD_LoadRecordingFile(in, current);
        }
        case 10:
        {
            return _iceD_MsgQueryDeviceIpcInfoReq(in, current);
        }
        case 11:
        {
            return _iceD_MsgQueryDeviceIpcStatusReq(in, current);
        }
        case 12:
        {
            return _iceD_MsgStartPropertyServerReq(in, current);
        }
        case 13:
        {
            return _iceD_MsgStartVioceReq(in, current);
        }
        case 14:
        {
            return _iceD_MsgStopPropertyServerReq(in, current);
        }
        case 15:
        {
            return _iceD_MsgStopVioceReq(in, current);
        }
        case 16:
        {
            return _iceD_RebootReq(in, current);
        }
        case 17:
        {
            return _iceD_RecordingFileReq(in, current);
        }
        case 18:
        {
            return _iceD_RecordingOperReq(in, current);
        }
        case 19:
        {
            return _iceD_RemoteControlReq(in, current);
        }
        case 20:
        {
            return _iceD_RestorConfigReq(in, current);
        }
        case 21:
        {
            return _iceD_SetupAlarmReq(in, current);
        }
        case 22:
        {
            return _iceD_StartVoideRecoingFile(in, current);
        }
        case 23:
        {
            return _iceD_StopRecordingOperReq(in, current);
        }
        case 24:
        {
            return _iceD_beatHeart(in, current);
        }
        case 25:
        {
            return _iceD_closeStream(in, current);
        }
        case 26:
        {
            return _iceD_getDeviceInfo(in, current);
        }
        case 27:
        {
            return _iceD_getDeviceStatus(in, current);
        }
        case 28:
        {
            return _iceD_ice_id(in, current);
        }
        case 29:
        {
            return _iceD_ice_ids(in, current);
        }
        case 30:
        {
            return _iceD_ice_isA(in, current);
        }
        case 31:
        {
            return _iceD_ice_ping(in, current);
        }
        case 32:
        {
            return _iceD_login(in, current);
        }
        case 33:
        {
            return _iceD_openRealStream(in, current);
        }
        case 34:
        {
            return _iceD_ptzControl(in, current);
        }
        case 35:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
Gateway::DeviceControlPrx::_iceI_openRealStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::RealStreamRespParam>>& outAsync, const ::Gateway::RealStreamReqParam& iceP_req, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_openRealStream_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_openRealStream_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_req);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Gateway::OpenStreamException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Gateway::DeviceControlPrx::_iceI_closeStream(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_callid, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Gateway_DeviceControl_closeStream_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_callid, iceP_id);
        },
        nullptr);
}

void
Gateway::DeviceControlPrx::_iceI_ptzControl(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_ptzControl_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_ptzControl_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id, iceP_cmd);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Gateway::DeviceControlException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Gateway::DeviceControlPrx::_iceI_getDeviceInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceInfo>>& outAsync, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_getDeviceInfo_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_getDeviceInfo_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Gateway::DeviceControlException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Gateway::DeviceControlPrx::_iceI_getDeviceStatus(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceStatus>>& outAsync, const ::std::string& iceP_id, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_getDeviceStatus_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_getDeviceStatus_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::Gateway::DeviceControlException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
Gateway::DeviceControlPrx::_iceI_login(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_login_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_login_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user, iceP_password);
        },
        nullptr);
}

void
Gateway::DeviceControlPrx::_iceI_shutdown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Gateway_DeviceControl_shutdown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
Gateway::DeviceControlPrx::_iceI_beatHeart(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::std::string& iceP_info, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_beatHeart_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_beatHeart_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_info);
        },
        nullptr);
}

void
Gateway::DeviceControlPrx::_iceI_CallSipUserReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::CallSipUserReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, int iceP_iType, const ::std::string& iceP_pSzIp, int iceP_iport, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_CallSipUserReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_CallSipUserReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData, iceP_iType, iceP_pSzIp, iceP_iport);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::CallSipUserReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_CalibrationTimeReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::CalibrationTimeReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_CalibrationTimeReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_CalibrationTimeReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::CalibrationTimeReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_HolderOperReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::HolderOperReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::std::string& iceP_pSzTypeOper, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_HolderOperReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_HolderOperReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData, iceP_pSzTypeOper);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::HolderOperReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_RecordingOperReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::RecordingOperReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_RecordingOperReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_RecordingOperReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::RecordingOperReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_StopRecordingOperReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::StopRecordingOperReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_StopRecordingOperReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_StopRecordingOperReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::StopRecordingOperReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_StartVoideRecoingFile(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::StartVoideRecoingFileResult>>& outAsync, const ::std::string& iceP_pSzIp, int iceP_iport, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_StartVoideRecoingFile_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_StartVoideRecoingFile_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzIp, iceP_iport);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::StartVoideRecoingFileResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_RecordingFileReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::RecordingFileReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::std::string& iceP_pSzStartTime, const ::std::string& iceP_pSzEndTime, int iceP_iType, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_RecordingFileReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_RecordingFileReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData, iceP_pSzStartTime, iceP_pSzEndTime, iceP_iType);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::RecordingFileReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_LoadRecordingFile(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::LoadRecordingFileResult>>& outAsync, const ::std::string& iceP_pSzSipIdVal, const ::std::string& iceP_pSzStarTime, const ::std::string& iceP_pSzEndTime, int iceP_sbType, const ::std::string& iceP_pSzFilePath, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_LoadRecordingFile_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_LoadRecordingFile_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipIdVal, iceP_pSzStarTime, iceP_pSzEndTime, iceP_sbType, iceP_pSzFilePath);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::LoadRecordingFileResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_FindRecordingFileReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::FindRecordingFileReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::std::string& iceP_pSzStartTime, const ::std::string& iceP_pSzEndTime, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_FindRecordingFileReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_FindRecordingFileReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData, iceP_pSzStartTime, iceP_pSzEndTime);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::FindRecordingFileReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_DataPlayStopOrStartReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::DataPlayStopOrStartReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_DataPlayStopOrStartReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_DataPlayStopOrStartReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::DataPlayStopOrStartReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_SetupAlarmReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::SetupAlarmReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_SetupAlarmReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_SetupAlarmReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::SetupAlarmReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_CloseAlarmReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::CloseAlarmReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_CloseAlarmReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_CloseAlarmReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::CloseAlarmReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_RestorConfigReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::RestorConfigReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_RestorConfigReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_RestorConfigReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::RestorConfigReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_RebootReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::RebootReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_RebootReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_RebootReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::RebootReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_RemoteControlReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::RemoteControlReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_RemoteControlReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_RemoteControlReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::RemoteControlReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_MsgStartVioceReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::MsgStartVioceReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_MsgStartVioceReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_MsgStartVioceReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::MsgStartVioceReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_MsgStopVioceReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::MsgStopVioceReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_MsgStopVioceReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_MsgStopVioceReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::MsgStopVioceReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_MsgQueryDeviceIpcStatusReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::MsgQueryDeviceIpcStatusReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_MsgQueryDeviceIpcStatusReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_MsgQueryDeviceIpcStatusReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::MsgQueryDeviceIpcStatusReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_MsgQueryDeviceIpcInfoReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::MsgQueryDeviceIpcInfoReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_MsgQueryDeviceIpcInfoReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_MsgQueryDeviceIpcInfoReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::MsgQueryDeviceIpcInfoReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_MsgStartPropertyServerReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::MsgStartPropertyServerReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_MsgStartPropertyServerReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_MsgStartPropertyServerReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::MsgStartPropertyServerReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_MsgStopPropertyServerReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::MsgStopPropertyServerReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_MsgStopPropertyServerReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_MsgStopPropertyServerReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::MsgStopPropertyServerReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_DeviceRefreshReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::DeviceRefreshReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_DeviceRefreshReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_DeviceRefreshReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::DeviceRefreshReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_DeviceShareNotify(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::DeviceShareNotifyResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_DeviceShareNotify_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_DeviceShareNotify_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::DeviceShareNotifyResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

void
Gateway::DeviceControlPrx::_iceI_GatewayRerootReq(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Gateway::DeviceControl::GatewayRerootReqResult>>& outAsync, const ::std::string& iceP_pSzSipData, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_GatewayRerootReq_name);
    outAsync->invoke(iceC_Gateway_DeviceControl_GatewayRerootReq_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pSzSipData);
        },
        nullptr,
        [](::Ice::InputStream* istr)
        {
            ::Gateway::DeviceControl::GatewayRerootReqResult v;
            istr->readAll(v.iResMsglen, v.sResMsgbuf);
            return v;
        });
}

::std::shared_ptr<::Ice::ObjectPrx>
Gateway::DeviceControlPrx::_newInstance() const
{
    return ::IceInternal::createProxy<DeviceControlPrx>();
}

const ::std::string&
Gateway::DeviceControlPrx::ice_staticId()
{
    return Gateway::DeviceControl::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Gateway_DeviceControl_openRealStream_name = "openRealStream";

const ::std::string iceC_Gateway_DeviceControl_closeStream_name = "closeStream";

const ::std::string iceC_Gateway_DeviceControl_ptzControl_name = "ptzControl";

const ::std::string iceC_Gateway_DeviceControl_getDeviceInfo_name = "getDeviceInfo";

const ::std::string iceC_Gateway_DeviceControl_getDeviceStatus_name = "getDeviceStatus";

const ::std::string iceC_Gateway_DeviceControl_login_name = "login";

const ::std::string iceC_Gateway_DeviceControl_shutdown_name = "shutdown";

const ::std::string iceC_Gateway_DeviceControl_beatHeart_name = "beatHeart";

const ::std::string iceC_Gateway_DeviceControl_CallSipUserReq_name = "CallSipUserReq";

const ::std::string iceC_Gateway_DeviceControl_CalibrationTimeReq_name = "CalibrationTimeReq";

const ::std::string iceC_Gateway_DeviceControl_HolderOperReq_name = "HolderOperReq";

const ::std::string iceC_Gateway_DeviceControl_RecordingOperReq_name = "RecordingOperReq";

const ::std::string iceC_Gateway_DeviceControl_StopRecordingOperReq_name = "StopRecordingOperReq";

const ::std::string iceC_Gateway_DeviceControl_StartVoideRecoingFile_name = "StartVoideRecoingFile";

const ::std::string iceC_Gateway_DeviceControl_RecordingFileReq_name = "RecordingFileReq";

const ::std::string iceC_Gateway_DeviceControl_LoadRecordingFile_name = "LoadRecordingFile";

const ::std::string iceC_Gateway_DeviceControl_FindRecordingFileReq_name = "FindRecordingFileReq";

const ::std::string iceC_Gateway_DeviceControl_DataPlayStopOrStartReq_name = "DataPlayStopOrStartReq";

const ::std::string iceC_Gateway_DeviceControl_SetupAlarmReq_name = "SetupAlarmReq";

const ::std::string iceC_Gateway_DeviceControl_CloseAlarmReq_name = "CloseAlarmReq";

const ::std::string iceC_Gateway_DeviceControl_RestorConfigReq_name = "RestorConfigReq";

const ::std::string iceC_Gateway_DeviceControl_RebootReq_name = "RebootReq";

const ::std::string iceC_Gateway_DeviceControl_RemoteControlReq_name = "RemoteControlReq";

const ::std::string iceC_Gateway_DeviceControl_MsgStartVioceReq_name = "MsgStartVioceReq";

const ::std::string iceC_Gateway_DeviceControl_MsgStopVioceReq_name = "MsgStopVioceReq";

const ::std::string iceC_Gateway_DeviceControl_MsgQueryDeviceIpcStatusReq_name = "MsgQueryDeviceIpcStatusReq";

const ::std::string iceC_Gateway_DeviceControl_MsgQueryDeviceIpcInfoReq_name = "MsgQueryDeviceIpcInfoReq";

const ::std::string iceC_Gateway_DeviceControl_MsgStartPropertyServerReq_name = "MsgStartPropertyServerReq";

const ::std::string iceC_Gateway_DeviceControl_MsgStopPropertyServerReq_name = "MsgStopPropertyServerReq";

const ::std::string iceC_Gateway_DeviceControl_DeviceRefreshReq_name = "DeviceRefreshReq";

const ::std::string iceC_Gateway_DeviceControl_DeviceShareNotify_name = "DeviceShareNotify";

const ::std::string iceC_Gateway_DeviceControl_GatewayRerootReq_name = "GatewayRerootReq";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Gateway::RequestCanceledException> iceC_Gateway_RequestCanceledException_init("::Gateway::RequestCanceledException");

}

Gateway::RequestCanceledException::~RequestCanceledException() throw()
{
}

::std::string
Gateway::RequestCanceledException::ice_id() const
{
    return "::Gateway::RequestCanceledException";
}

Gateway::RequestCanceledException*
Gateway::RequestCanceledException::ice_clone() const
{
    return new RequestCanceledException(*this);
}

void
Gateway::RequestCanceledException::ice_throw() const
{
    throw *this;
}

void
Gateway::RequestCanceledException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Gateway::RequestCanceledException", -1, true);
    Ice::StreamWriter< ::Gateway::RequestCanceledException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Gateway::RequestCanceledException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Gateway::RequestCanceledException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Gateway::OpenStreamException> iceC_Gateway_OpenStreamException_init("::Gateway::OpenStreamException");

}

Gateway::OpenStreamException::OpenStreamException(const ::std::string& iceP_reason) :
    ::Ice::UserException(),
    reason(iceP_reason)
{
}

Gateway::OpenStreamException::~OpenStreamException() throw()
{
}

::std::string
Gateway::OpenStreamException::ice_id() const
{
    return "::Gateway::OpenStreamException";
}

Gateway::OpenStreamException*
Gateway::OpenStreamException::ice_clone() const
{
    return new OpenStreamException(*this);
}

void
Gateway::OpenStreamException::ice_throw() const
{
    throw *this;
}

void
Gateway::OpenStreamException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Gateway::OpenStreamException", -1, true);
    Ice::StreamWriter< ::Gateway::OpenStreamException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Gateway::OpenStreamException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Gateway::OpenStreamException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Gateway::DeviceControlException> iceC_Gateway_DeviceControlException_init("::Gateway::DeviceControlException");

}

Gateway::DeviceControlException::DeviceControlException(const ::std::string& iceP_reason) :
    ::Ice::UserException(),
    reason(iceP_reason)
{
}

Gateway::DeviceControlException::~DeviceControlException() throw()
{
}

::std::string
Gateway::DeviceControlException::ice_id() const
{
    return "::Gateway::DeviceControlException";
}

Gateway::DeviceControlException*
Gateway::DeviceControlException::ice_clone() const
{
    return new DeviceControlException(*this);
}

void
Gateway::DeviceControlException::ice_throw() const
{
    throw *this;
}

void
Gateway::DeviceControlException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Gateway::DeviceControlException", -1, true);
    Ice::StreamWriter< ::Gateway::DeviceControlException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Gateway::DeviceControlException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Gateway::DeviceControlException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

Gateway::AMD_DeviceControl_openRealStream::~AMD_DeviceControl_openRealStream()
{
}

Gateway::AMD_DeviceControl_closeStream::~AMD_DeviceControl_closeStream()
{
}

Gateway::AMD_DeviceControl_ptzControl::~AMD_DeviceControl_ptzControl()
{
}

Gateway::AMD_DeviceControl_getDeviceInfo::~AMD_DeviceControl_getDeviceInfo()
{
}

Gateway::AMD_DeviceControl_getDeviceStatus::~AMD_DeviceControl_getDeviceStatus()
{
}

Gateway::AMD_DeviceControl_beatHeart::~AMD_DeviceControl_beatHeart()
{
}

Gateway::AMD_DeviceControl_CallSipUserReq::~AMD_DeviceControl_CallSipUserReq()
{
}

Gateway::AMD_DeviceControl_CalibrationTimeReq::~AMD_DeviceControl_CalibrationTimeReq()
{
}

Gateway::AMD_DeviceControl_HolderOperReq::~AMD_DeviceControl_HolderOperReq()
{
}

Gateway::AMD_DeviceControl_RecordingOperReq::~AMD_DeviceControl_RecordingOperReq()
{
}

Gateway::AMD_DeviceControl_StopRecordingOperReq::~AMD_DeviceControl_StopRecordingOperReq()
{
}

Gateway::AMD_DeviceControl_StartVoideRecoingFile::~AMD_DeviceControl_StartVoideRecoingFile()
{
}

Gateway::AMD_DeviceControl_RecordingFileReq::~AMD_DeviceControl_RecordingFileReq()
{
}

Gateway::AMD_DeviceControl_LoadRecordingFile::~AMD_DeviceControl_LoadRecordingFile()
{
}

Gateway::AMD_DeviceControl_FindRecordingFileReq::~AMD_DeviceControl_FindRecordingFileReq()
{
}

Gateway::AMD_DeviceControl_DataPlayStopOrStartReq::~AMD_DeviceControl_DataPlayStopOrStartReq()
{
}

Gateway::AMD_DeviceControl_SetupAlarmReq::~AMD_DeviceControl_SetupAlarmReq()
{
}

Gateway::AMD_DeviceControl_CloseAlarmReq::~AMD_DeviceControl_CloseAlarmReq()
{
}

Gateway::AMD_DeviceControl_RestorConfigReq::~AMD_DeviceControl_RestorConfigReq()
{
}

Gateway::AMD_DeviceControl_RebootReq::~AMD_DeviceControl_RebootReq()
{
}

Gateway::AMD_DeviceControl_RemoteControlReq::~AMD_DeviceControl_RemoteControlReq()
{
}

Gateway::AMD_DeviceControl_MsgStartVioceReq::~AMD_DeviceControl_MsgStartVioceReq()
{
}

Gateway::AMD_DeviceControl_MsgStopVioceReq::~AMD_DeviceControl_MsgStopVioceReq()
{
}

Gateway::AMD_DeviceControl_MsgQueryDeviceIpcStatusReq::~AMD_DeviceControl_MsgQueryDeviceIpcStatusReq()
{
}

Gateway::AMD_DeviceControl_MsgQueryDeviceIpcInfoReq::~AMD_DeviceControl_MsgQueryDeviceIpcInfoReq()
{
}

Gateway::AMD_DeviceControl_MsgStartPropertyServerReq::~AMD_DeviceControl_MsgStartPropertyServerReq()
{
}

Gateway::AMD_DeviceControl_MsgStopPropertyServerReq::~AMD_DeviceControl_MsgStopPropertyServerReq()
{
}

Gateway::AMD_DeviceControl_DeviceRefreshReq::~AMD_DeviceControl_DeviceRefreshReq()
{
}

Gateway::AMD_DeviceControl_DeviceShareNotify::~AMD_DeviceControl_DeviceShareNotify()
{
}

Gateway::AMD_DeviceControl_GatewayRerootReq::~AMD_DeviceControl_GatewayRerootReq()
{
}

IceAsync::Gateway::AMD_DeviceControl_openRealStream::AMD_DeviceControl_openRealStream(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_openRealStream::ice_response(const ::Gateway::RealStreamRespParam& resp)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(resp);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_closeStream::AMD_DeviceControl_closeStream(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_closeStream::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_ptzControl::AMD_DeviceControl_ptzControl(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_ptzControl::ice_response()
{
    writeEmptyParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_getDeviceInfo::AMD_DeviceControl_getDeviceInfo(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_getDeviceInfo::ice_response(const ::Gateway::DeviceInfo& info)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(info);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_getDeviceStatus::AMD_DeviceControl_getDeviceStatus(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_getDeviceStatus::ice_response(const ::Gateway::DeviceStatus& status)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(status);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_beatHeart::AMD_DeviceControl_beatHeart(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_beatHeart::ice_response(const ::std::string& rinfo)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(rinfo);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_CallSipUserReq::AMD_DeviceControl_CallSipUserReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_CallSipUserReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_CalibrationTimeReq::AMD_DeviceControl_CalibrationTimeReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_CalibrationTimeReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_HolderOperReq::AMD_DeviceControl_HolderOperReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_HolderOperReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_RecordingOperReq::AMD_DeviceControl_RecordingOperReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_RecordingOperReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_StopRecordingOperReq::AMD_DeviceControl_StopRecordingOperReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_StopRecordingOperReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_StartVoideRecoingFile::AMD_DeviceControl_StartVoideRecoingFile(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_StartVoideRecoingFile::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_RecordingFileReq::AMD_DeviceControl_RecordingFileReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_RecordingFileReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_LoadRecordingFile::AMD_DeviceControl_LoadRecordingFile(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_LoadRecordingFile::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_FindRecordingFileReq::AMD_DeviceControl_FindRecordingFileReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_FindRecordingFileReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_DataPlayStopOrStartReq::AMD_DeviceControl_DataPlayStopOrStartReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_DataPlayStopOrStartReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_SetupAlarmReq::AMD_DeviceControl_SetupAlarmReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_SetupAlarmReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_CloseAlarmReq::AMD_DeviceControl_CloseAlarmReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_CloseAlarmReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_RestorConfigReq::AMD_DeviceControl_RestorConfigReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_RestorConfigReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_RebootReq::AMD_DeviceControl_RebootReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_RebootReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_RemoteControlReq::AMD_DeviceControl_RemoteControlReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_RemoteControlReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_MsgStartVioceReq::AMD_DeviceControl_MsgStartVioceReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_MsgStartVioceReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_MsgStopVioceReq::AMD_DeviceControl_MsgStopVioceReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_MsgStopVioceReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_MsgQueryDeviceIpcStatusReq::AMD_DeviceControl_MsgQueryDeviceIpcStatusReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_MsgQueryDeviceIpcStatusReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_MsgQueryDeviceIpcInfoReq::AMD_DeviceControl_MsgQueryDeviceIpcInfoReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_MsgQueryDeviceIpcInfoReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_MsgStartPropertyServerReq::AMD_DeviceControl_MsgStartPropertyServerReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_MsgStartPropertyServerReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_MsgStopPropertyServerReq::AMD_DeviceControl_MsgStopPropertyServerReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_MsgStopPropertyServerReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_DeviceRefreshReq::AMD_DeviceControl_DeviceRefreshReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_DeviceRefreshReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_DeviceShareNotify::AMD_DeviceControl_DeviceShareNotify(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_DeviceShareNotify::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}

IceAsync::Gateway::AMD_DeviceControl_GatewayRerootReq::AMD_DeviceControl_GatewayRerootReq(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::Gateway::AMD_DeviceControl_GatewayRerootReq::ice_response(::Ice::Int iResMsglen, const ::std::string& sResMsgbuf)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(iResMsglen);
    ostr->write(sResMsgbuf);
    endWriteParams();
    completed();
}
::IceProxy::Ice::Object* ::IceProxy::Gateway::upCast(::IceProxy::Gateway::DeviceControl* p) { return p; }

void
::IceProxy::Gateway::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::Gateway::DeviceControl>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Gateway::DeviceControl;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_openRealStream(const ::Gateway::RealStreamReqParam& iceP_req, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_openRealStream_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_openRealStream_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_openRealStream_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_req);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_openRealStream_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_openRealStream(::Gateway::RealStreamRespParam& iceP_resp, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_openRealStream_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Gateway::OpenStreamException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_resp);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_closeStream(const ::std::string& iceP_callid, const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_closeStream_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_closeStream_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_callid);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_closeStream_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_closeStream(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Gateway_DeviceControl_closeStream_name);
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_ptzControl(const ::std::string& iceP_id, const ::std::string& iceP_cmd, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_ptzControl_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_ptzControl_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_ptzControl_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        ostr->write(iceP_cmd);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_ptzControl_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_ptzControl(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_ptzControl_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Gateway::DeviceControlException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_getDeviceInfo(const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_getDeviceInfo_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_getDeviceInfo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_getDeviceInfo_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_getDeviceInfo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_getDeviceInfo(::Gateway::DeviceInfo& iceP_info, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_getDeviceInfo_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Gateway::DeviceControlException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_info);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_getDeviceStatus(const ::std::string& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_getDeviceStatus_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_getDeviceStatus_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_getDeviceStatus_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_getDeviceStatus_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_getDeviceStatus(::Gateway::DeviceStatus& iceP_status, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_getDeviceStatus_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Gateway::DeviceControlException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_status);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_login(const ::std::string& iceP_user, const ::std::string& iceP_password, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_login_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_login_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_login_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        ostr->write(iceP_password);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_login_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::Gateway::DeviceControl::end_login(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_login_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_shutdown(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_shutdown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_shutdown_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Gateway_DeviceControl_shutdown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_shutdown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Gateway_DeviceControl_shutdown_name);
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_beatHeart(const ::std::string& iceP_info, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_beatHeart_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_beatHeart_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_beatHeart_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_info);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_beatHeart_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_beatHeart(::std::string& iceP_rinfo, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_beatHeart_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_rinfo);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_CallSipUserReq(const ::std::string& iceP_pSzSipData, ::Ice::Int iceP_iType, const ::std::string& iceP_pSzIp, ::Ice::Int iceP_iport, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_CallSipUserReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_CallSipUserReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_CallSipUserReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        ostr->write(iceP_iType);
        ostr->write(iceP_pSzIp);
        ostr->write(iceP_iport);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_CallSipUserReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_CallSipUserReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_CallSipUserReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_CalibrationTimeReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_CalibrationTimeReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_CalibrationTimeReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_CalibrationTimeReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_CalibrationTimeReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_CalibrationTimeReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_CalibrationTimeReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_HolderOperReq(const ::std::string& iceP_pSzSipData, const ::std::string& iceP_pSzTypeOper, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_HolderOperReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_HolderOperReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_HolderOperReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        ostr->write(iceP_pSzTypeOper);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_HolderOperReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_HolderOperReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_HolderOperReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_RecordingOperReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_RecordingOperReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_RecordingOperReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_RecordingOperReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_RecordingOperReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_RecordingOperReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_RecordingOperReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_StopRecordingOperReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_StopRecordingOperReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_StopRecordingOperReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_StopRecordingOperReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_StopRecordingOperReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_StopRecordingOperReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_StopRecordingOperReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_StartVoideRecoingFile(const ::std::string& iceP_pSzIp, ::Ice::Int iceP_iport, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_StartVoideRecoingFile_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_StartVoideRecoingFile_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_StartVoideRecoingFile_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzIp);
        ostr->write(iceP_iport);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_StartVoideRecoingFile_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_StartVoideRecoingFile(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_StartVoideRecoingFile_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_RecordingFileReq(const ::std::string& iceP_pSzSipData, const ::std::string& iceP_pSzStartTime, const ::std::string& iceP_pSzEndTime, ::Ice::Int iceP_iType, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_RecordingFileReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_RecordingFileReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_RecordingFileReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        ostr->write(iceP_pSzStartTime);
        ostr->write(iceP_pSzEndTime);
        ostr->write(iceP_iType);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_RecordingFileReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_RecordingFileReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_RecordingFileReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_LoadRecordingFile(const ::std::string& iceP_pSzSipIdVal, const ::std::string& iceP_pSzStarTime, const ::std::string& iceP_pSzEndTime, ::Ice::Int iceP_sbType, const ::std::string& iceP_pSzFilePath, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_LoadRecordingFile_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_LoadRecordingFile_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_LoadRecordingFile_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipIdVal);
        ostr->write(iceP_pSzStarTime);
        ostr->write(iceP_pSzEndTime);
        ostr->write(iceP_sbType);
        ostr->write(iceP_pSzFilePath);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_LoadRecordingFile_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_LoadRecordingFile(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_LoadRecordingFile_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_FindRecordingFileReq(const ::std::string& iceP_pSzSipData, const ::std::string& iceP_pSzStartTime, const ::std::string& iceP_pSzEndTime, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_FindRecordingFileReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_FindRecordingFileReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_FindRecordingFileReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        ostr->write(iceP_pSzStartTime);
        ostr->write(iceP_pSzEndTime);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_FindRecordingFileReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_FindRecordingFileReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_FindRecordingFileReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_DataPlayStopOrStartReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_DataPlayStopOrStartReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_DataPlayStopOrStartReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_DataPlayStopOrStartReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_DataPlayStopOrStartReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_DataPlayStopOrStartReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_DataPlayStopOrStartReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_SetupAlarmReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_SetupAlarmReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_SetupAlarmReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_SetupAlarmReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_SetupAlarmReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_SetupAlarmReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_SetupAlarmReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_CloseAlarmReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_CloseAlarmReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_CloseAlarmReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_CloseAlarmReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_CloseAlarmReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_CloseAlarmReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_CloseAlarmReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_RestorConfigReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_RestorConfigReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_RestorConfigReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_RestorConfigReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_RestorConfigReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_RestorConfigReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_RestorConfigReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_RebootReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_RebootReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_RebootReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_RebootReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_RebootReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_RebootReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_RebootReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_RemoteControlReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_RemoteControlReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_RemoteControlReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_RemoteControlReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_RemoteControlReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_RemoteControlReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_RemoteControlReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_MsgStartVioceReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_MsgStartVioceReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_MsgStartVioceReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_MsgStartVioceReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_MsgStartVioceReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_MsgStartVioceReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_MsgStartVioceReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_MsgStopVioceReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_MsgStopVioceReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_MsgStopVioceReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_MsgStopVioceReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_MsgStopVioceReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_MsgStopVioceReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_MsgStopVioceReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_MsgQueryDeviceIpcStatusReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_MsgQueryDeviceIpcStatusReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_MsgQueryDeviceIpcStatusReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_MsgQueryDeviceIpcStatusReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_MsgQueryDeviceIpcStatusReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_MsgQueryDeviceIpcStatusReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_MsgQueryDeviceIpcStatusReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_MsgQueryDeviceIpcInfoReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_MsgQueryDeviceIpcInfoReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_MsgQueryDeviceIpcInfoReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_MsgQueryDeviceIpcInfoReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_MsgQueryDeviceIpcInfoReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_MsgQueryDeviceIpcInfoReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_MsgQueryDeviceIpcInfoReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_MsgStartPropertyServerReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_MsgStartPropertyServerReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_MsgStartPropertyServerReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_MsgStartPropertyServerReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_MsgStartPropertyServerReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_MsgStartPropertyServerReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_MsgStartPropertyServerReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_MsgStopPropertyServerReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_MsgStopPropertyServerReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_MsgStopPropertyServerReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_MsgStopPropertyServerReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_MsgStopPropertyServerReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_MsgStopPropertyServerReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_MsgStopPropertyServerReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_DeviceRefreshReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_DeviceRefreshReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_DeviceRefreshReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_DeviceRefreshReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_DeviceRefreshReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_DeviceRefreshReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_DeviceRefreshReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_DeviceShareNotify(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_DeviceShareNotify_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_DeviceShareNotify_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_DeviceShareNotify_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_DeviceShareNotify_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_DeviceShareNotify(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_DeviceShareNotify_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::Gateway::DeviceControl::_iceI_begin_GatewayRerootReq(const ::std::string& iceP_pSzSipData, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Gateway_DeviceControl_GatewayRerootReq_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Gateway_DeviceControl_GatewayRerootReq_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Gateway_DeviceControl_GatewayRerootReq_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pSzSipData);
        result->endWriteParams();
        result->invoke(iceC_Gateway_DeviceControl_GatewayRerootReq_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Gateway::DeviceControl::end_GatewayRerootReq(::Ice::Int& iceP_iResMsglen, ::std::string& iceP_sResMsgbuf, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Gateway_DeviceControl_GatewayRerootReq_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_iResMsglen);
    istr->read(iceP_sResMsgbuf);
    result->_endReadParams();
}

::IceProxy::Ice::Object*
IceProxy::Gateway::DeviceControl::_newInstance() const
{
    return new DeviceControl;
}

const ::std::string&
IceProxy::Gateway::DeviceControl::ice_staticId()
{
    return ::Gateway::DeviceControl::ice_staticId();
}

Gateway::DeviceControl::~DeviceControl()
{
}

::Ice::Object* Gateway::upCast(::Gateway::DeviceControl* p) { return p; }


namespace
{
const ::std::string iceC_Gateway_DeviceControl_ids[2] =
{
    "::Gateway::DeviceControl",
    "::Ice::Object"
};

}

bool
Gateway::DeviceControl::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Gateway_DeviceControl_ids, iceC_Gateway_DeviceControl_ids + 2, s);
}

::std::vector< ::std::string>
Gateway::DeviceControl::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Gateway_DeviceControl_ids[0], &iceC_Gateway_DeviceControl_ids[2]);
}

const ::std::string&
Gateway::DeviceControl::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Gateway::DeviceControl::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Gateway::DeviceControl";
    return typeId;
#else
    return iceC_Gateway_DeviceControl_ids[0];
#endif
}

bool
Gateway::DeviceControl::_iceD_openRealStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Gateway::RealStreamReqParam iceP_req;
    istr->read(iceP_req);
    inS.endReadParams();
    this->openRealStream_async(new IceAsync::Gateway::AMD_DeviceControl_openRealStream(inS), iceP_req, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_closeStream(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_callid;
    ::std::string iceP_id;
    istr->read(iceP_callid);
    istr->read(iceP_id);
    inS.endReadParams();
    this->closeStream_async(new IceAsync::Gateway::AMD_DeviceControl_closeStream(inS), iceP_callid, iceP_id, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_ptzControl(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    ::std::string iceP_cmd;
    istr->read(iceP_id);
    istr->read(iceP_cmd);
    inS.endReadParams();
    this->ptzControl_async(new IceAsync::Gateway::AMD_DeviceControl_ptzControl(inS), iceP_id, iceP_cmd, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_getDeviceInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->getDeviceInfo_async(new IceAsync::Gateway::AMD_DeviceControl_getDeviceInfo(inS), iceP_id, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_getDeviceStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->getDeviceStatus_async(new IceAsync::Gateway::AMD_DeviceControl_getDeviceStatus(inS), iceP_id, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_login(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_user;
    ::std::string iceP_password;
    istr->read(iceP_user);
    istr->read(iceP_password);
    inS.endReadParams();
    bool ret = this->login(iceP_user, iceP_password, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_shutdown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->shutdown(current);
    inS.writeEmptyParams();
    return true;
}

bool
Gateway::DeviceControl::_iceD_beatHeart(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_info;
    istr->read(iceP_info);
    inS.endReadParams();
    this->beatHeart_async(new IceAsync::Gateway::AMD_DeviceControl_beatHeart(inS), iceP_info, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_CallSipUserReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    ::Ice::Int iceP_iType;
    ::std::string iceP_pSzIp;
    ::Ice::Int iceP_iport;
    istr->read(iceP_pSzSipData);
    istr->read(iceP_iType);
    istr->read(iceP_pSzIp);
    istr->read(iceP_iport);
    inS.endReadParams();
    this->CallSipUserReq_async(new IceAsync::Gateway::AMD_DeviceControl_CallSipUserReq(inS), iceP_pSzSipData, iceP_iType, iceP_pSzIp, iceP_iport, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_CalibrationTimeReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->CalibrationTimeReq_async(new IceAsync::Gateway::AMD_DeviceControl_CalibrationTimeReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_HolderOperReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    ::std::string iceP_pSzTypeOper;
    istr->read(iceP_pSzSipData);
    istr->read(iceP_pSzTypeOper);
    inS.endReadParams();
    this->HolderOperReq_async(new IceAsync::Gateway::AMD_DeviceControl_HolderOperReq(inS), iceP_pSzSipData, iceP_pSzTypeOper, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_RecordingOperReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->RecordingOperReq_async(new IceAsync::Gateway::AMD_DeviceControl_RecordingOperReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_StopRecordingOperReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->StopRecordingOperReq_async(new IceAsync::Gateway::AMD_DeviceControl_StopRecordingOperReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_StartVoideRecoingFile(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzIp;
    ::Ice::Int iceP_iport;
    istr->read(iceP_pSzIp);
    istr->read(iceP_iport);
    inS.endReadParams();
    this->StartVoideRecoingFile_async(new IceAsync::Gateway::AMD_DeviceControl_StartVoideRecoingFile(inS), iceP_pSzIp, iceP_iport, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_RecordingFileReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    ::std::string iceP_pSzStartTime;
    ::std::string iceP_pSzEndTime;
    ::Ice::Int iceP_iType;
    istr->read(iceP_pSzSipData);
    istr->read(iceP_pSzStartTime);
    istr->read(iceP_pSzEndTime);
    istr->read(iceP_iType);
    inS.endReadParams();
    this->RecordingFileReq_async(new IceAsync::Gateway::AMD_DeviceControl_RecordingFileReq(inS), iceP_pSzSipData, iceP_pSzStartTime, iceP_pSzEndTime, iceP_iType, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_LoadRecordingFile(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipIdVal;
    ::std::string iceP_pSzStarTime;
    ::std::string iceP_pSzEndTime;
    ::Ice::Int iceP_sbType;
    ::std::string iceP_pSzFilePath;
    istr->read(iceP_pSzSipIdVal);
    istr->read(iceP_pSzStarTime);
    istr->read(iceP_pSzEndTime);
    istr->read(iceP_sbType);
    istr->read(iceP_pSzFilePath);
    inS.endReadParams();
    this->LoadRecordingFile_async(new IceAsync::Gateway::AMD_DeviceControl_LoadRecordingFile(inS), iceP_pSzSipIdVal, iceP_pSzStarTime, iceP_pSzEndTime, iceP_sbType, iceP_pSzFilePath, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_FindRecordingFileReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    ::std::string iceP_pSzStartTime;
    ::std::string iceP_pSzEndTime;
    istr->read(iceP_pSzSipData);
    istr->read(iceP_pSzStartTime);
    istr->read(iceP_pSzEndTime);
    inS.endReadParams();
    this->FindRecordingFileReq_async(new IceAsync::Gateway::AMD_DeviceControl_FindRecordingFileReq(inS), iceP_pSzSipData, iceP_pSzStartTime, iceP_pSzEndTime, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_DataPlayStopOrStartReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->DataPlayStopOrStartReq_async(new IceAsync::Gateway::AMD_DeviceControl_DataPlayStopOrStartReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_SetupAlarmReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->SetupAlarmReq_async(new IceAsync::Gateway::AMD_DeviceControl_SetupAlarmReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_CloseAlarmReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->CloseAlarmReq_async(new IceAsync::Gateway::AMD_DeviceControl_CloseAlarmReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_RestorConfigReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->RestorConfigReq_async(new IceAsync::Gateway::AMD_DeviceControl_RestorConfigReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_RebootReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->RebootReq_async(new IceAsync::Gateway::AMD_DeviceControl_RebootReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_RemoteControlReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->RemoteControlReq_async(new IceAsync::Gateway::AMD_DeviceControl_RemoteControlReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_MsgStartVioceReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->MsgStartVioceReq_async(new IceAsync::Gateway::AMD_DeviceControl_MsgStartVioceReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_MsgStopVioceReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->MsgStopVioceReq_async(new IceAsync::Gateway::AMD_DeviceControl_MsgStopVioceReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_MsgQueryDeviceIpcStatusReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->MsgQueryDeviceIpcStatusReq_async(new IceAsync::Gateway::AMD_DeviceControl_MsgQueryDeviceIpcStatusReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_MsgQueryDeviceIpcInfoReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->MsgQueryDeviceIpcInfoReq_async(new IceAsync::Gateway::AMD_DeviceControl_MsgQueryDeviceIpcInfoReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_MsgStartPropertyServerReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->MsgStartPropertyServerReq_async(new IceAsync::Gateway::AMD_DeviceControl_MsgStartPropertyServerReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_MsgStopPropertyServerReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->MsgStopPropertyServerReq_async(new IceAsync::Gateway::AMD_DeviceControl_MsgStopPropertyServerReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_DeviceRefreshReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->DeviceRefreshReq_async(new IceAsync::Gateway::AMD_DeviceControl_DeviceRefreshReq(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_DeviceShareNotify(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->DeviceShareNotify_async(new IceAsync::Gateway::AMD_DeviceControl_DeviceShareNotify(inS), iceP_pSzSipData, current);
    return false;
}

bool
Gateway::DeviceControl::_iceD_GatewayRerootReq(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_pSzSipData;
    istr->read(iceP_pSzSipData);
    inS.endReadParams();
    this->GatewayRerootReq_async(new IceAsync::Gateway::AMD_DeviceControl_GatewayRerootReq(inS), iceP_pSzSipData, current);
    return false;
}

namespace
{
const ::std::string iceC_Gateway_DeviceControl_all[] =
{
    "CalibrationTimeReq",
    "CallSipUserReq",
    "CloseAlarmReq",
    "DataPlayStopOrStartReq",
    "DeviceRefreshReq",
    "DeviceShareNotify",
    "FindRecordingFileReq",
    "GatewayRerootReq",
    "HolderOperReq",
    "LoadRecordingFile",
    "MsgQueryDeviceIpcInfoReq",
    "MsgQueryDeviceIpcStatusReq",
    "MsgStartPropertyServerReq",
    "MsgStartVioceReq",
    "MsgStopPropertyServerReq",
    "MsgStopVioceReq",
    "RebootReq",
    "RecordingFileReq",
    "RecordingOperReq",
    "RemoteControlReq",
    "RestorConfigReq",
    "SetupAlarmReq",
    "StartVoideRecoingFile",
    "StopRecordingOperReq",
    "beatHeart",
    "closeStream",
    "getDeviceInfo",
    "getDeviceStatus",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "login",
    "openRealStream",
    "ptzControl",
    "shutdown"
};

}

bool
Gateway::DeviceControl::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Gateway_DeviceControl_all, iceC_Gateway_DeviceControl_all + 36, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Gateway_DeviceControl_all)
    {
        case 0:
        {
            return _iceD_CalibrationTimeReq(in, current);
        }
        case 1:
        {
            return _iceD_CallSipUserReq(in, current);
        }
        case 2:
        {
            return _iceD_CloseAlarmReq(in, current);
        }
        case 3:
        {
            return _iceD_DataPlayStopOrStartReq(in, current);
        }
        case 4:
        {
            return _iceD_DeviceRefreshReq(in, current);
        }
        case 5:
        {
            return _iceD_DeviceShareNotify(in, current);
        }
        case 6:
        {
            return _iceD_FindRecordingFileReq(in, current);
        }
        case 7:
        {
            return _iceD_GatewayRerootReq(in, current);
        }
        case 8:
        {
            return _iceD_HolderOperReq(in, current);
        }
        case 9:
        {
            return _iceD_LoadRecordingFile(in, current);
        }
        case 10:
        {
            return _iceD_MsgQueryDeviceIpcInfoReq(in, current);
        }
        case 11:
        {
            return _iceD_MsgQueryDeviceIpcStatusReq(in, current);
        }
        case 12:
        {
            return _iceD_MsgStartPropertyServerReq(in, current);
        }
        case 13:
        {
            return _iceD_MsgStartVioceReq(in, current);
        }
        case 14:
        {
            return _iceD_MsgStopPropertyServerReq(in, current);
        }
        case 15:
        {
            return _iceD_MsgStopVioceReq(in, current);
        }
        case 16:
        {
            return _iceD_RebootReq(in, current);
        }
        case 17:
        {
            return _iceD_RecordingFileReq(in, current);
        }
        case 18:
        {
            return _iceD_RecordingOperReq(in, current);
        }
        case 19:
        {
            return _iceD_RemoteControlReq(in, current);
        }
        case 20:
        {
            return _iceD_RestorConfigReq(in, current);
        }
        case 21:
        {
            return _iceD_SetupAlarmReq(in, current);
        }
        case 22:
        {
            return _iceD_StartVoideRecoingFile(in, current);
        }
        case 23:
        {
            return _iceD_StopRecordingOperReq(in, current);
        }
        case 24:
        {
            return _iceD_beatHeart(in, current);
        }
        case 25:
        {
            return _iceD_closeStream(in, current);
        }
        case 26:
        {
            return _iceD_getDeviceInfo(in, current);
        }
        case 27:
        {
            return _iceD_getDeviceStatus(in, current);
        }
        case 28:
        {
            return _iceD_ice_id(in, current);
        }
        case 29:
        {
            return _iceD_ice_ids(in, current);
        }
        case 30:
        {
            return _iceD_ice_isA(in, current);
        }
        case 31:
        {
            return _iceD_ice_ping(in, current);
        }
        case 32:
        {
            return _iceD_login(in, current);
        }
        case 33:
        {
            return _iceD_openRealStream(in, current);
        }
        case 34:
        {
            return _iceD_ptzControl(in, current);
        }
        case 35:
        {
            return _iceD_shutdown(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
Gateway::DeviceControl::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::Gateway::DeviceControl, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Gateway::DeviceControl::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::Gateway::DeviceControl, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
Gateway::_icePatchObjectPtr(DeviceControlPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Gateway::DeviceControlPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Gateway::DeviceControl::ice_staticId(), v);
    }
}

namespace Ice
{
}

#endif
